#define YY_CHAR char
#line 1 "/usr/local/lib/flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
/* #include <osfcn.h> */
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "pddl2.lex"
#define INITIAL 0
#define YY_PDDL_Scanner_FLEX_SCANNER
/* CHAR [a-zA-Z_] */
#include "scanner.h"
#line 37 "pddl2.lex"
#line 196 "/usr/local/lib/flexskel.cc"

#define yy___stderr YY_PDDL_Scanner_ERRFILE
#define yy___text YY_PDDL_Scanner_TEXT
#define yy___leng YY_PDDL_Scanner_LENG
#define yy___in YY_PDDL_Scanner_IN
#define yy___out YY_PDDL_Scanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, yy___in ); \
		YY_PDDL_Scanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_PDDL_Scanner_DEBUG != 0
#define yy___flex_debug YY_PDDL_Scanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_PDDL_Scanner_ECHO
#define yy___input YY_PDDL_Scanner_INPUT
#define yy___fatal_error YY_PDDL_Scanner_FATAL_ERROR
#define yy___wrap YY_PDDL_Scanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_PDDL_Scanner_IFILE  *yy_input_file;

    YY_PDDL_Scanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_PDDL_Scanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_PDDL_Scanner_DEBUG != 0
int YY_PDDL_Scanner_DEBUG_FLAG=YY_PDDL_Scanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_PDDL_Scanner_CURRENT_BUFFER
static YY_BUFFER_STATE YY_PDDL_Scanner_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_PDDL_Scanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_PDDL_Scanner_CHAR *yy___text;
int yy___leng;

YY_PDDL_Scanner_IFILE  *yy___in = (YY_PDDL_Scanner_IFILE  *) 0;
YY_PDDL_Scanner_OFILE *yy___out = (YY_PDDL_Scanner_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_PDDL_Scanner_CHAR *yy_c_buf_p = (YY_PDDL_Scanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_PDDL_Scanner_CHAR c, YY_PDDL_Scanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_PDDL_Scanner_ECHO_NOCODE
void YY_PDDL_Scanner_CLASS::yy___echo()
{YY_PDDL_Scanner_ECHO_CODE
}
#endif
#ifndef YY_PDDL_Scanner_INPUT_NOCODE
int  YY_PDDL_Scanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_PDDL_Scanner_INPUT_CODE
}
#endif
#ifndef YY_PDDL_Scanner_FATAL_ERROR_NOCODE
void YY_PDDL_Scanner_CLASS::yy___fatal_error(char *msg)
{YY_PDDL_Scanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_PDDL_Scanner_WRAP_NOCODE
int  YY_PDDL_Scanner_CLASS::yy___wrap()
{YY_PDDL_Scanner_WRAP_CODE
}
#endif
void YY_PDDL_Scanner_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_PDDL_Scanner_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_PDDL_Scanner_DEBUG != 0
 YY_PDDL_Scanner_DEBUG_FLAG=YY_PDDL_Scanner_DEBUG_INIT;
#endif
}

YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_CLASS(YY_PDDL_Scanner_CONSTRUCTOR_PARAM) YY_PDDL_Scanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_PDDL_Scanner_CONSTRUCTOR_CODE;
}
YY_PDDL_Scanner_CLASS::~YY_PDDL_Scanner_CLASS() 
{YY_PDDL_Scanner_DESTRUCTOR_CODE;
 if(YY_PDDL_Scanner_CURRENT_BUFFER)
  YY_PDDL_Scanner_DELETE_BUFFER(YY_PDDL_Scanner_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 115
typedef int yy_state_type;
static const short int yy_accept[538] =
    {   0,
      112,  112,  115,  114,    1,    3,  114,  114,    5,    6,
       11,    9,   10,   12,  112,   17,    2,   15,   19,   13,
      114,    7,    8,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,    1,    0,    4,
        0,   18,  112,  113,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,    2,   16,   14,  109,  109,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,   43,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,    4,

      113,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  109,  109,  109,  111,   42,  111,    0,  111,
      111,  111,  111,  111,  111,  111,  111,  111,   47,  111,
      111,  111,  111,  111,   48,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
       97,  110,  110,  110,  110,  110,  110,  110,  110,   96,
      110,  110,  110,  110,  110,  110,   98,   78,  110,  110,

      110,  109,  111,  111,    0,    0,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,   49,
      111,   51,  111,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   92,  110,  110,   57,  110,   56,  110,
      110,   80,  110,  110,   77,  110,  110,   94,  110,  110,
      110,  110,  110,  110,  110,   79,   81,  109,  111,  111,
        0,    0,  111,  111,  111,  111,  111,  111,  111,  111,
       50,  111,   46,  111,  111,  111,  111,  111,    0,  111,
      111,  111,   91,  111,  111,  111,  111,  110,   93,  110,

      110,  110,  110,  110,  110,   29,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   41,   24,  109,  103,   72,   35,    0,
      111,  111,  111,   25,   26,   52,  111,   44,   45,  111,
      111,  111,  111,   73,    0,  111,  111,  111,  111,  111,
      111,   99,   27,  110,  110,  110,  110,   54,  110,   37,
      110,  110,  110,  110,  110,  110,   58,   63,  110,  110,
      110,  110,  110,  110,  110,   59,  110,  109,  111,    0,
      111,   89,  111,   90,  111,  111,  111,  111,    0,  111,
       53,  111,  111,  111,  111,  111,  110,  110,  110,   82,

      110,  110,  110,   84,  110,  110,  110,  110,   55,  110,
      110,  110,  110,   28,  110,  110,  110,  109,  111,   34,
       88,  111,   69,  111,   68,  111,   65,   64,   36,  111,
      111,   70,  104,  111,  111,  110,  110,  110,   39,  110,
      110,  110,  110,  110,  110,   60,  110,  110,  110,  110,
      110,  110,   66,  111,  111,   86,  111,   87,  111,  111,
      111,  111,  111,   74,   33,   21,  110,  110,   40,   23,
       95,   38,  110,  110,  110,  110,  110,  110,  110,  110,
      111,   85,  111,  111,  100,   71,  111,  111,   67,  110,
      110,   76,  110,   31,  110,   22,  110,  110,  110,  111,

      111,  101,  111,  111,  102,  110,  110,  110,  110,  110,
      110,  111,  105,  111,  111,  110,  110,   32,   20,  110,
      110,  108,  111,  111,  110,  110,   61,  110,  107,  111,
      110,  110,   83,  106,   30,   62,    0
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,    1,   10,
       11,   12,   13,    1,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,   23,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       24,   25,   26,    1,   27,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,    1,   54,    1,   55,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    1,    2,    3,    1,    3,    3,    3,    3,    1,
        1,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        3,    1,    1,    1,    3,    1,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    3,    3
    } ;

static const short int yy_base[547] =
    {   0,
        0,    0,  930, 1793,  905, 1793,   51,  851, 1793, 1793,
     1793, 1793,  871, 1793,   42,   50,    0,  835, 1793,  823,
      774, 1793, 1793,  100,  152,   26,   83,   98,  102,  135,
      148,  139,  163,  173,  182,   23,  195,  795,  106, 1793,
      113, 1793,   46,  773,  239,  291,   90,  219,  167,  229,
      220,  238,  192,  116,  242,  246,  255,  280,  283,  250,
      285,  290,  297,    0, 1793, 1793,  343,  395,    0,  240,
      294,  330,  326,  376,  388,  340,  385,  400,  412,  415,
      424,  433,  436,  450,  447,  460,  463,  472,  475,  485,
      488,  497,  500,  509,  512,  521,  532,  542,  545,  122,

      771,    0,  171,  243,  284,  354,  308,  422,  359,  534,
      345,  336,  439,  384,  462,  457,  557,  531,  524,  555,
      552,  564,  565,  567,  570,  577,  587,  578,  590,  596,
      582,  601,    0,  737,   26,  593,  602,  614,  625,  111,
      617,  629,  638,  647,  650,  659,  662,  671,  674,  683,
      686,  734,  698,  702,  711,  722,  725,  734,  745,  748,
      757,  761,  773,  777,  789,  786,  799,  608,  665,  811,
      644,  732,  637,  776,  783,  689,  807,  696,  809,  710,
      780,  813,  821,  820,  831,  834,  824,  833,  841,  785,
      844,  845,  851,  846,  848,  853,  870,  855,  865,  872,

      863,  105,  867,  876,  741,  732,  745,  734,  888,  885,
      897,  907,  910,  919,  923,  932,  935,  945,  729,  949,
      958,  961,  970,  974,  983,  986,  995,  998, 1007, 1010,
     1019, 1022, 1031,  895,  875, 1043, 1029,  915, 1044, 1041,
      882, 1051,  922,  929,  937, 1053,  964, 1055,  973, 1062,
     1001, 1056, 1063, 1075, 1066, 1073, 1074, 1076, 1085, 1087,
     1086, 1094, 1098,  729, 1095, 1099, 1104,  178, 1096, 1107,
      723,  725,  719,  700, 1110, 1120, 1123, 1132, 1135, 1144,
     1147, 1156, 1159, 1168,  686, 1172, 1181, 1184,  155, 1193,
     1203, 1207, 1216, 1220, 1229, 1233, 1242, 1117, 1109, 1247,

     1254, 1138, 1206, 1180, 1255, 1241, 1260, 1265, 1261, 1262,
     1273, 1266, 1275, 1283, 1284, 1286, 1288, 1287, 1292, 1293,
     1296, 1297,  681, 1294, 1305,  196, 1323, 1306, 1793,  671,
      668,  657, 1309, 1319, 1332, 1335, 1344, 1347, 1356, 1359,
      663, 1368, 1371, 1381,  653, 1384, 1393,  144, 1396,  640,
     1405, 1408, 1329, 1331, 1415, 1383, 1411, 1338, 1418, 1362,
     1423, 1435, 1420, 1438, 1442, 1441, 1443, 1445, 1446, 1447,
     1448, 1452, 1469, 1450, 1470, 1487,  640,   18,  628,  626,
      612,  638, 1472, 1489, 1493,  623, 1505, 1509,  606, 1518,
     1521,  576,  566, 1531,  539, 1534, 1478, 1475, 1546, 1477,

     1497, 1480, 1512, 1499, 1544, 1553, 1554, 1541, 1501, 1558,
     1561, 1566, 1564, 1568, 1573,  533,  511,  131,  516, 1793,
      531,  198, 1576,  501, 1579,  493, 1588, 1591, 1793, 1601,
      487,    0, 1610,  493, 1613, 1575, 1609, 1620, 1616, 1639,
     1633, 1634, 1635, 1637, 1641, 1656, 1643, 1645, 1663, 1664,
      496,  476,  467,  453,  454,    0,  440,    0,  446, 1658,
      432,  334,  423, 1667, 1670, 1671, 1673,  420, 1677, 1681,
     1682, 1685, 1688,  406, 1691, 1694, 1692, 1695,  403,  397,
      405,    0,  408,  406, 1703,    0,  400,  387,    0, 1699,
      383, 1702,  374, 1709, 1716, 1713, 1717,  362,  366,  357,

      353,    0,  336,  341, 1721,  323,  312, 1724, 1722,  292,
      298,  291,    0,  292,  277,  266,  257, 1723, 1726,  234,
      222,    0,  213,  190,  169,  123,    0,   81,    0,   91,
       69,   70,    0,    0,    0,    0, 1793, 1772, 1776,   71,
     1778, 1780, 1782, 1784, 1786, 1788
    } ;

static const short int yy_def[547] =
    {   0,
      537,    1,  537,  537,  537,  537,  538,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  539,  537,  537,  537,
      540,  537,  537,  541,  541,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  537,  538,  537,
      538,  537,  537,  537,  542,  542,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,  539,  537,  537,  543,  543,  544,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,  538,

      537,  545,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,  546,   68,   68,   25,   25,   25,  537,  544,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  544,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   68,   25,   25,  537,  537,  544,  544,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  544,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,  545,   46,   46,   46,   68,   25,   25,
      537,  537,  544,  544,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,  544,   25,   25,   25,  537,   25,
       25,   25,   25,   25,   25,   25,   25,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,  545,   46,   46,   68,   25,   25,  537,  537,
      544,  544,   25,   25,   25,   25,   25,   25,   25,   25,
      544,   25,   25,   25,  537,   25,   25,  544,   25,  544,
       25,   25,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,  545,   68,  544,  537,
      544,  544,   25,   25,   25,  544,   25,   25,  537,   25,
       25,  544,  544,   25,  544,   25,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,  545,  545,   68,  544,  537,
      544,  544,   25,  544,   25,  544,   25,   25,  537,   25,
      544,  544,   25,  544,   25,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
      545,  545,   68,  544,  544,  544,  544,  544,  544,   25,
      544,  544,  544,   25,   46,   46,   46,  545,   46,   46,
       46,   46,   46,  545,   46,   46,   46,   46,  545,  545,
      544,  544,  544,  544,   25,  544,  544,  544,  544,   46,
      545,   46,  545,   46,   46,   46,   46,  545,  545,  544,

      544,  544,  544,  544,   46,  545,  545,   46,   46,  545,
      545,  544,  544,  544,  544,  545,  545,   46,   46,  545,
      545,  544,  544,  544,  545,  545,  545,  545,  544,  544,
      545,  545,  545,  544,  545,  545,    0,  537,  537,  537,
      537,  537,  537,  537,  537,  537
    } ;

static const short int yy_nxt[1849] =
    {   0,
        4,    5,    6,    4,    7,    8,    4,    4,    4,    9,
       10,   11,   12,   13,    4,   14,   15,   16,   17,   18,
       19,   20,   21,   22,    4,   23,   24,   25,   24,   24,
       26,   27,   28,   24,   24,   29,   24,   24,   24,   30,
       31,   32,   33,   24,   24,   34,   35,   36,   24,   37,
       24,   24,   24,    4,    4,   40,   44,   75,   43,  418,
       44,   70,   43,   97,   70,  134,   70,   76,   70,   70,
      202,   70,   70,  134,   67,   41,   45,   46,   45,   47,
       48,   49,   50,   51,   52,   53,   45,   54,   55,   56,
       57,   58,   59,   45,   60,   61,   62,   45,   63,   45,

       45,   45,   45,   69,  536,   69,   69,   69,   69,  535,
       40,   69,   69,   69,   69,   69,   69,  100,   77,  103,
       69,   70,  534,   70,   69,   79,   40,  533,   70,   70,
       41,  106,  268,   78,   81,  103,   70,   41,   70,   80,
       70,   82,   83,   70,   70,  103,   41,   84,   70,  207,
      208,  119,  134,   69,   69,   69,  289,   69,   69,   69,
       69,  103,   85,   69,   69,   69,   69,   69,   69,  532,
       86,  453,   69,   70,  392,   70,   69,   70,  134,   70,
       70,   70,  345,   89,   70,   70,   70,   90,   70,   87,
       71,  393,   72,   70,   70,   88,  103,   73,   74,  109,

      103,   70,   92,   70,   93,   69,   69,   91,   70,   70,
      531,   70,  103,   70,   94,  110,  103,  111,   70,   70,
       70,  103,   70,   95,  326,  134,   96,   70,   70,   98,
       99,  378,  117,   70,  530,   70,  118,  103,  456,  457,
       70,   70,  102,  134,  102,  102,  102,  102,  103,  103,
      102,  102,  102,  102,  102,  102,  112,  529,  103,  102,
      107,  115,  528,  102,  103,  103,  108,  103,  527,  116,
      113,  103,  103,  120,  103,  103,  114,  121,   70,  103,
       70,  128,  122,  103,  103,   70,   70,  103,  103,  168,
      526,  103,  102,  102,  102,  103,  102,  102,  102,  102,

      103,  525,  102,  102,  102,  102,  102,  102,  123,  103,
      125,  102,  103,  103,  103,  102,  129,  130,  524,  103,
      104,  126,  124,  523,  132,  103,  103,  127,  103,  169,
      103,  522,   70,  521,   70,  103,  105,  103,  520,   70,
       70,  131,  103,  136,  102,  102,  133,  171,  133,  133,
      133,  133,  517,  103,  133,  133,  133,  133,  133,  133,
      137,  487,  488,  133,   70,  176,   70,  133,   70,  516,
       70,  138,   70,  515,  103,   70,   70,  139,   70,  143,
       70,  103,  514,  103,  513,   70,   70,  175,  103,  140,
      103,  173,  512,  511,  170,  510,  133,  133,  133,  103,

      133,  133,  133,  133,  103,  507,  133,  133,  133,  133,
      133,  133,  506,  103,   70,  133,   70,  141,  504,  133,
      142,   70,   70,   70,  178,   70,   70,  145,   70,  103,
       70,  144,  503,   70,   70,  146,  502,  501,   70,  500,
       70,  499,  135,  498,  493,   70,   70,  491,  133,  133,
      147,  103,   70,   70,  489,   70,  149,   70,   70,  148,
       70,   70,   70,  152,   70,  151,  172,  103,  103,   70,
       70,   70,  486,   70,   70,  150,   70,  484,   70,   70,
      483,   70,   70,  177,  103,   70,  103,   70,   70,  179,
       70,  103,   70,   70,  482,   70,   70,  153,   70,  481,

      154,   70,  103,   70,  180,   70,   70,  103,   70,  155,
       70,  156,   70,   70,  134,   70,  157,   70,   70,  158,
       70,   70,  480,   70,  160,   70,   70,  479,   70,  159,
       70,   70,  463,   70,   70,   70,  461,   70,   70,  459,
       70,  458,   70,   70,  455,   70,  161,   70,  162,   70,
       70,  454,   70,  103,   70,   70,  452,   70,  163,   70,
      103,   70,  165,  103,  185,  174,   70,   70,  164,  103,
       70,  451,   70,  166,  434,  184,  103,   70,   70,  103,
       70,  103,   70,   70,  103,   70,  103,   70,   70,  181,
       70,  167,  182,  103,  103,  186,  103,  103,  187,  103,

      103,  189,  103,  188,  192,  183,  103,  103,  432,  103,
      103,  103,  103,  190,  191,  103,  103,  431,  193,  103,
      203,  195,  103,  103,  200,  103,  139,  103,  194,  198,
      103,   70,  103,   70,  196,  103,  197,  103,   70,   70,
       70,  199,   70,  234,  429,  201,  103,   70,   70,  204,
      426,  422,   70,  103,   70,   70,  205,   70,  421,   70,
       70,  209,   70,   70,  210,  211,  103,   70,  241,   70,
      206,  239,  420,  103,   70,   70,   70,  419,   70,  213,
      417,  212,  103,   70,   70,   70,  395,   70,   70,  103,
       70,  389,   70,   70,  103,   70,   70,   70,  216,   70,

       70,  386,   70,  382,  214,   70,  235,  215,   70,   70,
      103,   70,   70,  381,   70,  380,   70,   70,  103,   70,
       70,  217,  377,   70,   70,  246,   70,  341,   70,   70,
      218,   70,   70,  220,  103,  244,   70,  221,   70,  103,
       70,  103,   70,   70,   70,  332,  331,   70,   70,   70,
      222,   70,  330,  329,  248,  103,   70,   70,  323,  240,
       70,  103,   70,   70,  285,   70,  224,   70,   70,  223,
       70,   70,   70,  225,   70,  274,  273,  103,  272,   70,
       70,  271,  219,   70,  134,   70,  226,  101,   70,  101,
       70,   70,  228,   70,   70,   70,   38,   70,  227,   70,

      229,   70,   70,   70,   68,  103,   70,   70,  230,  103,
      243,   70,  103,   70,  103,   70,  242,   70,   70,   70,
      231,  103,   70,   70,   70,  103,  232,   70,  103,   70,
      103,   70,   70,  233,   70,   70,  103,   70,  103,   70,
      103,  236,  103,   66,   70,   70,  245,  247,  250,  103,
      103,  251,  103,  103,  103,   65,  237,  238,  103,  249,
      103,  252,  103,  103,  255,  103,  103,  253,  254,  103,
      103,  257,  256,  103,  103,  261,  103,  103,  103,  103,
      259,  260,  103,  264,  103,  258,  103,   43,  263,  103,
      103,  103,  103,  103,  103,  262,  103,   42,  103,  103,

      103,  103,  265,  266,  299,   70,   38,   70,  267,  270,
      103,  305,   70,   70,   70,  103,   70,  103,  269,  275,
      103,   70,   70,   70,  103,  276,   70,  103,   70,  537,
       70,   70,  277,   70,   70,   70,  298,   70,  278,  537,
      103,  537,   70,   70,  103,   70,  302,   70,   70,  537,
       70,  103,   70,   70,  281,   70,  279,   70,  103,   70,
      103,   70,  307,   70,   70,  280,  103,  103,   70,   70,
      282,  289,   70,   70,  103,   70,  284,   70,   70,  537,
       70,   70,  103,   70,  308,   70,  283,   70,  286,   70,
       70,   70,  288,  103,   70,   70,   70,  287,   70,   70,

      537,   70,  103,   70,   70,  290,   70,   70,   70,  103,
       70,  537,   70,  537,   70,   70,   70,  292,  103,   70,
       70,  291,  537,   70,   70,  537,   70,  293,   70,   70,
      103,   70,   70,   70,  537,   70,   70,  537,   70,  312,
       70,   70,  537,   70,  294,  295,  103,   70,   70,  537,
       70,  296,   70,   70,  537,   70,   70,   70,  103,   70,
       70,  537,   70,  537,   70,   70,  297,   70,   70,   70,
      103,   70,  103,  103,  103,  301,   70,   70,  300,  303,
      103,  537,  103,  537,  103,  103,  103,  304,  103,  103,
      310,  103,  103,  537,  537,  103,  103,  306,  103,  309,

      103,  103,  315,  103,  103,  103,  311,  103,  103,  313,
      314,  103,  316,  317,  103,  103,  103,  320,  103,  103,
      103,  103,  319,  103,  103,  322,  318,  103,  103,  321,
      103,  103,  103,  103,   70,  537,   70,  333,  103,  103,
      324,  327,   70,  103,  325,   70,  103,  328,   70,  103,
       70,  334,   70,   70,  103,   70,   70,  353,   70,  537,
       70,   70,  103,  335,  537,   70,   70,  103,   70,   70,
       70,  537,   70,  337,  537,   70,  336,   70,   70,  537,
       70,   70,   70,  103,   70,   70,  537,   70,  357,  338,
       70,  537,   70,   70,  339,  340,   70,   70,  537,   70,

      537,   70,   70,  537,   70,   70,   70,  342,   70,  103,
       70,  537,   70,   70,   70,  359,  343,   70,   70,   70,
      348,   70,   70,  537,   70,  103,   70,   70,  344,   70,
       70,   70,  537,   70,  347,  103,  537,  346,   70,   70,
      537,   70,  350,   70,  537,   70,  358,   70,   70,   70,
      537,  103,   70,   70,   70,  349,   70,  537,   70,  537,
       70,   70,   70,  537,  537,   70,   70,   70,  351,   70,
      103,   70,  537,   70,   70,   70,  103,  537,   70,   70,
       70,  355,  352,  103,  103,  537,  103,   70,   70,  103,
      103,  103,  103,  354,  103,  103,  363,  366,  356,  103,

      103,  360,  103,  362,  103,  361,  103,  364,  365,  367,
      103,  103,  368,  103,  537,  103,  103,  103,  103,  371,
      103,  373,  103,  103,  370,  103,  103,  372,  103,  103,
      369,  103,  103,  103,  103,  376,  379,  103,  374,  103,
      375,  103,  103,  537,   70,  537,   70,   70,  537,   70,
      103,   70,   70,  537,  383,   70,  537,   70,  103,   70,
      103,   70,  537,   70,   70,   70,  397,  103,   70,   70,
       70,  537,   70,   70,  103,   70,  103,   70,   70,  537,
       70,   70,   70,  103,   70,   70,  537,   70,  537,   70,
       70,  103,   70,   70,   70,  384,   70,   70,  537,   70,

      537,   70,   70,  537,  385,   70,   70,  103,   70,   70,
      399,   70,  103,   70,   70,  390,   70,   70,  537,   70,
      387,   70,   70,  388,   70,  537,   70,   70,  103,   70,
       70,   70,  391,   70,   70,  394,   70,  537,   70,   70,
      103,   70,   70,   70,  103,  396,   70,  103,   70,  103,
       70,   70,  103,   70,   70,  398,  103,  400,  403,  401,
      103,  405,  404,  103,  103,  103,  402,  103,  103,  407,
      103,  103,  103,  537,  103,  103,  103,  103,  410,  103,
      103,  103,  412,  103,  406,  537,  103,  103,  103,  408,
      103,  409,  103,  103,  411,  414,  413,  103,  103,  103,

      416,  415,  424,  423,  103,  537,  103,  103,  537,  103,
       70,  440,   70,  537,  103,  103,  103,   70,   70,  436,
      103,  437,  103,  103,  425,  103,  103,   70,  103,   70,
      103,   70,  103,   70,   70,   70,  427,  439,   70,   70,
      428,  103,  103,   70,  103,   70,  103,   70,  537,   70,
       70,   70,  537,  441,   70,   70,   70,  103,  430,   70,
      537,   70,  433,   70,   70,  435,   70,   70,  445,   70,
      103,   70,   70,  103,   70,  103,   70,   70,  537,   70,
       70,  438,  103,  103,  442,  537,  103,  103,  443,  103,
      103,  103,  447,  103,  444,  103,  446,  103,  103,  103,

      537,  448,  103,  103,  103,  537,  103,  537,  537,  103,
      449,  103,  450,  103,   70,  465,   70,   70,  103,   70,
      103,   70,   70,  462,   70,   70,   70,  537,   70,   70,
      460,   70,  537,   70,   70,  537,   70,   70,  103,   70,
      537,   70,  537,  464,  537,  103,   70,   70,   70,  103,
       70,   70,  468,   70,  466,   70,   70,  537,   70,   70,
      467,  103,  103,  103,  471,  103,  103,  537,  103,  474,
      103,  537,  103,  469,  103,  537,  537,  537,  103,  470,
      103,  473,  103,  472,  103,  103,  103,  475,  103,  485,
      103,  476,  103,  103,  477,  478,   70,  537,   70,  103,

      103,  103,  103,   70,   70,   70,  103,   70,  103,  103,
      103,  103,   70,   70,  103,  103,  103,  103,  103,  490,
      103,  103,  103,  103,  103,  537,  103,  103,  103,  495,
      103,  103,  537,  103,  492,  497,  494,  496,  103,  103,
      103,   70,  103,   70,  505,  103,  103,  103,   70,   70,
      103,  103,  103,  103,  103,  103,  537,  508,  103,  537,
      537,  103,  103,  509,  518,  537,  103,  519,  103,  103,
      537,  103,   39,   39,   39,   39,   64,  537,   64,   64,
       70,   70,  103,  103,  134,  134,   69,   69,  102,  102,
      133,  133,    3,  537,  537,  537,  537,  537,  537,  537,

      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537
    } ;

static const short int yy_chk[1849] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    7,   15,   26,   15,  378,
       43,   36,   43,   36,   26,  378,   26,   26,   36,   36,
      135,   26,   26,  135,  540,    7,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,   16,   24,  532,   24,   24,   24,   24,  531,
       39,   24,   24,   24,   24,   24,   24,   41,   27,   47,
       24,   27,  530,   27,   24,   28,  100,  528,   27,   27,
       39,   47,  202,   27,   29,   47,   28,   41,   28,   28,
       29,   29,   29,   28,   28,   54,  100,   29,   29,  140,
      140,   54,  202,   24,   24,   25,  289,   25,   25,   25,
       25,   54,   30,   25,   25,   25,   25,   25,   25,  526,
       30,  418,   25,   30,  348,   30,   25,   32,  418,   32,
       30,   30,  289,   32,   32,   32,   31,   32,   31,   31,
       25,  348,   25,   31,   31,   31,   49,   25,   25,   49,

      103,   33,   34,   33,   34,   25,   25,   33,   33,   33,
      525,   34,   49,   34,   34,   49,  103,   49,   34,   34,
       35,   53,   35,   35,  268,  268,   35,   35,   35,   37,
       37,  326,   53,   37,  524,   37,   53,   53,  422,  422,
       37,   37,   45,  326,   45,   45,   45,   45,   48,   51,
       45,   45,   45,   45,   45,   45,   50,  523,   50,   45,
       48,   51,  521,   45,   48,   51,   48,   52,  520,   52,
       50,   55,  104,   55,   50,   56,   50,   56,   70,   60,
       70,   60,   57,   52,   57,   70,   70,   55,  104,  104,
      517,   56,   45,   45,   46,   60,   46,   46,   46,   46,

       57,  516,   46,   46,   46,   46,   46,   46,   58,   58,
       59,   46,   59,  105,   61,   46,   61,   62,  515,   62,
       46,   59,   58,  514,   63,   58,   63,   59,   59,  105,
       61,  512,   71,  511,   71,   62,   46,  107,  510,   71,
       71,   62,   63,   71,   46,   46,   67,  107,   67,   67,
       67,   67,  507,  107,   67,   67,   67,   67,   67,   67,
       72,  462,  462,   67,   73,  112,   73,   67,   72,  506,
       72,   73,   73,  504,  111,   72,   72,   74,   76,   76,
       76,  112,  503,  106,  501,   76,   76,  111,  109,   74,
      111,  109,  500,  499,  106,  498,   67,   67,   68,  106,

       68,   68,   68,   68,  109,  493,   68,   68,   68,   68,
       68,   68,  491,  114,   74,   68,   74,   75,  488,   68,
       75,   74,   74,   77,  114,   77,   75,   78,   75,  114,
       77,   77,  487,   75,   75,   78,  484,  483,   78,  481,
       78,  480,   68,  479,  474,   78,   78,  468,   68,   68,
       79,  108,   79,   80,  463,   80,   81,   79,   79,   80,
       80,   80,   81,   84,   81,   83,  108,  108,  113,   81,
       81,   82,  461,   82,   83,   82,   83,  459,   82,   82,
      457,   83,   83,  113,  113,   85,  116,   85,   84,  115,
       84,  115,   85,   85,  455,   84,   84,   85,   86,  454,

       86,   87,  116,   87,  116,   86,   86,  115,   87,   87,
       88,   88,   88,   89,  453,   89,   90,   88,   88,   91,
       89,   89,  452,   90,   92,   90,   91,  451,   91,   91,
       90,   90,  434,   91,   91,   92,  431,   92,   93,  426,
       93,  424,   92,   92,  421,   93,   93,   94,   94,   94,
       95,  419,   95,  119,   94,   94,  417,   95,   95,   96,
      118,   96,   97,  110,  119,  110,   96,   96,   96,  119,
       97,  416,   97,   98,  395,  118,  118,   97,   97,  110,
       98,  121,   98,   99,  120,   99,  117,   98,   98,  117,
       99,   99,  117,  122,  123,  120,  124,  121,  121,  125,

      120,  123,  117,  122,  126,  117,  126,  128,  393,  122,
      123,  131,  124,  124,  125,  125,  127,  392,  127,  129,
      136,  128,  126,  128,  131,  130,  139,  131,  127,  130,
      132,  136,  127,  136,  129,  129,  129,  168,  136,  136,
      137,  130,  137,  168,  389,  132,  132,  137,  137,  138,
      386,  382,  138,  168,  138,  141,  139,  141,  381,  138,
      138,  141,  141,  141,  142,  143,  173,  142,  173,  142,
      139,  171,  380,  171,  142,  142,  143,  379,  143,  145,
      377,  144,  173,  143,  143,  144,  350,  144,  145,  171,
      145,  345,  144,  144,  169,  145,  145,  146,  148,  146,

      147,  341,  147,  332,  146,  146,  169,  147,  147,  148,
      169,  148,  149,  331,  149,  330,  148,  148,  176,  149,
      149,  150,  323,  150,  151,  178,  151,  285,  150,  150,
      151,  151,  151,  153,  176,  176,  153,  154,  153,  180,
      154,  178,  154,  153,  153,  274,  273,  154,  154,  155,
      156,  155,  272,  271,  180,  180,  155,  155,  264,  172,
      156,  172,  156,  157,  219,  157,  158,  156,  156,  157,
      157,  157,  158,  159,  158,  208,  207,  172,  206,  158,
      158,  205,  152,  159,  134,  159,  160,  101,  160,   44,
      159,  159,  162,  160,  160,  161,   38,  161,  161,  162,

      163,  162,  161,  161,   21,  174,  162,  162,  164,  181,
      175,  163,  175,  163,  190,  164,  174,  164,  163,  163,
      165,  174,  164,  164,  166,  181,  166,  165,  175,  165,
      190,  166,  166,  167,  165,  165,  177,  167,  179,  167,
      170,  170,  182,   20,  167,  167,  177,  179,  183,  184,
      183,  184,  177,  187,  179,   18,  170,  170,  182,  182,
      185,  185,  188,  186,  188,  184,  183,  186,  187,  187,
      189,  191,  189,  191,  192,  194,  185,  195,  188,  186,
      193,  193,  196,  197,  198,  192,  189,   13,  196,  191,
      192,  194,  201,  195,  199,  195,  193,    8,  196,  197,

      198,  200,  199,  200,  235,  203,    5,  203,  201,  204,
      199,  241,  203,  203,  204,  197,  204,  200,  203,  209,
      235,  204,  204,  210,  234,  210,  209,  241,  209,    3,
      210,  210,  211,  209,  209,  211,  234,  211,  212,    0,
      234,    0,  211,  211,  238,  212,  238,  212,  213,    0,
      213,  243,  212,  212,  215,  213,  213,  214,  244,  214,
      238,  215,  243,  215,  214,  214,  245,  243,  215,  215,
      216,  223,  216,  217,  244,  217,  218,  216,  216,    0,
      217,  217,  245,  218,  245,  218,  217,  220,  220,  220,
      218,  218,  222,  247,  220,  220,  221,  221,  221,  222,

        0,  222,  249,  221,  221,  224,  222,  222,  223,  247,
      223,    0,  224,    0,  224,  223,  223,  226,  249,  224,
      224,  225,    0,  225,  226,    0,  226,  227,  225,  225,
      251,  226,  226,  227,    0,  227,  228,    0,  228,  251,
      227,  227,    0,  228,  228,  229,  251,  229,  230,    0,
      230,  231,  229,  229,    0,  230,  230,  231,  237,  231,
      232,    0,  232,    0,  231,  231,  233,  232,  232,  233,
      240,  233,  236,  239,  237,  237,  233,  233,  236,  239,
      242,    0,  246,    0,  248,  252,  240,  240,  236,  239,
      248,  250,  253,    0,    0,  255,  242,  242,  246,  246,

      248,  252,  256,  257,  254,  258,  250,  250,  253,  253,
      254,  255,  257,  257,  259,  261,  260,  261,  256,  257,
      254,  258,  260,  262,  265,  263,  259,  263,  266,  262,
      259,  261,  260,  267,  269,    0,  269,  275,  299,  262,
      265,  269,  269,  263,  266,  270,  298,  270,  275,  267,
      275,  276,  270,  270,  299,  275,  275,  298,  276,    0,
      276,  277,  298,  277,    0,  276,  276,  302,  277,  277,
      278,    0,  278,  279,    0,  279,  278,  278,  278,    0,
      279,  279,  280,  302,  280,  281,    0,  281,  302,  280,
      280,    0,  281,  281,  282,  284,  282,  283,    0,  283,

        0,  282,  282,    0,  283,  283,  284,  286,  284,  304,
      286,    0,  286,  284,  284,  304,  287,  286,  286,  287,
      292,  287,  288,    0,  288,  304,  287,  287,  288,  288,
      288,  290,    0,  290,  291,  303,    0,  290,  290,  290,
        0,  291,  295,  291,    0,  292,  303,  292,  291,  291,
        0,  303,  292,  292,  293,  294,  293,    0,  294,    0,
      294,  293,  293,    0,    0,  294,  294,  295,  296,  295,
      306,  296,    0,  296,  295,  295,  300,    0,  296,  296,
      297,  301,  297,  301,  305,    0,  306,  297,  297,  307,
      309,  310,  300,  300,  308,  312,  309,  312,  301,  301,

      305,  305,  311,  308,  313,  307,  309,  310,  311,  313,
      308,  312,  314,  315,    0,  316,  318,  317,  311,  317,
      313,  319,  320,  324,  316,  321,  322,  318,  314,  315,
      315,  316,  318,  317,  325,  322,  327,  319,  320,  324,
      321,  321,  322,    0,  328,    0,  328,  333,    0,  333,
      325,  328,  328,    0,  333,  333,    0,  334,  353,  334,
      354,  327,    0,  327,  334,  334,  354,  358,  327,  327,
      335,    0,  335,  336,  353,  336,  354,  335,  335,    0,
      336,  336,  337,  358,  337,  338,    0,  338,    0,  337,
      337,  360,  338,  338,  339,  337,  339,  340,    0,  340,

        0,  339,  339,    0,  340,  340,  342,  360,  342,  343,
      356,  343,  356,  342,  342,  346,  343,  343,    0,  344,
      342,  344,  346,  343,  346,    0,  344,  344,  356,  346,
      346,  347,  347,  347,  349,  349,  349,    0,  347,  347,
      357,  349,  349,  351,  355,  351,  352,  359,  352,  363,
      351,  351,  361,  352,  352,  355,  357,  357,  361,  359,
      355,  363,  362,  359,  362,  363,  359,  364,  361,  365,
      366,  365,  367,    0,  368,  369,  370,  371,  370,  374,
      362,  372,  372,  364,  364,    0,  366,  365,  367,  366,
      368,  369,  370,  371,  371,  374,  373,  372,  373,  375,

      376,  375,  384,  383,  398,    0,  400,  397,    0,  402,
      383,  402,  383,    0,  373,  375,  376,  383,  383,  397,
      398,  398,  400,  397,  385,  402,  401,  384,  404,  384,
      409,  385,  376,  385,  384,  384,  387,  401,  385,  385,
      388,  403,  401,  387,  404,  387,  409,  388,    0,  388,
      387,  387,    0,  403,  388,  388,  390,  403,  390,  391,
        0,  391,  394,  390,  390,  396,  391,  391,  408,  394,
      408,  394,  396,  405,  396,  399,  394,  394,    0,  396,
      396,  399,  406,  407,  405,    0,  408,  410,  406,  405,
      411,  399,  411,  413,  407,  412,  410,  414,  406,  407,

        0,  412,  415,  410,  436,    0,  411,    0,    0,  413,
      413,  412,  415,  414,  423,  436,  423,  425,  415,  425,
      436,  423,  423,  433,  425,  425,  427,    0,  427,  428,
      430,  428,    0,  427,  427,    0,  428,  428,  437,  430,
        0,  430,    0,  435,    0,  439,  430,  430,  433,  438,
      433,  435,  440,  435,  437,  433,  433,    0,  435,  435,
      438,  439,  441,  442,  443,  438,  444,    0,  440,  446,
      445,    0,  447,  441,  448,    0,    0,    0,  441,  442,
      443,  445,  444,  444,  440,  446,  445,  447,  447,  460,
      448,  448,  449,  450,  449,  450,  460,    0,  460,  465,

      466,  446,  467,  460,  460,  464,  469,  464,  449,  450,
      470,  471,  464,  464,  472,  465,  466,  473,  467,  467,
      475,  477,  469,  476,  478,    0,  470,  471,  490,  476,
      472,  492,    0,  473,  473,  478,  475,  477,  494,  476,
      478,  485,  496,  485,  490,  495,  497,  492,  485,  485,
      505,  509,  518,  508,  494,  519,    0,  495,  496,    0,
        0,  495,  497,  497,  508,    0,  505,  509,  518,  508,
        0,  519,  538,  538,  538,  538,  539,    0,  539,  539,
      541,  541,  542,  542,  543,  543,  544,  544,  545,  545,
      546,  546,  537,  537,  537,  537,  537,  537,  537,  537,

      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_PDDL_Scanner_DEBUG != 0
static const short int yy_rule_linenum[114] =
    {   0,
       39,   40,   41,   43,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
      115,  116,  117,  118,  120,  121,  122,  123,  124,  125,
      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  137,  138,  140,  141,  142,  143,  144,  146,  147,

      148,  150,  151,  152,  153,  154,  155,  156,  158,  166,
      171,  204,  205
    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 376 "/usr/local/lib/flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_PDDL_Scanner_LEX_DEFINED
YY_PDDL_Scanner_LEX_RETURN YY_PDDL_Scanner_LEX ( YY_PDDL_Scanner_LEX_PARAM )
YY_PDDL_Scanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_PDDL_Scanner_LEX_RETURN YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_LEX ( YY_PDDL_Scanner_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_PDDL_Scanner_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 401 "/usr/local/lib/flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_PDDL_Scanner_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_PDDL_Scanner_OFILE_DEFAULT;

	if ( YY_PDDL_Scanner_CURRENT_BUFFER )
	    YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, yy___in );
	else
	    YY_PDDL_Scanner_CURRENT_BUFFER = YY_PDDL_Scanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_PDDL_Scanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 429 "/usr/local/lib/flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 538 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 537 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 440 "/usr/local/lib/flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 443 "/usr/local/lib/flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_PDDL_Scanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 39 "pddl2.lex"
;
	YY_BREAK
case 2:
#line 40 "pddl2.lex"
;
	YY_BREAK
case 3:
#line 41 "pddl2.lex"
{ _line_no++; if (_trace_line) std::cerr << std::endl << "LINE: " << _line_no << std::endl; }
	YY_BREAK
case 4:
#line 43 "pddl2.lex"
{
  val.sval = strndup(yytext + 1, strlen(yytext) - 2);
  return PDDL_Parser::TK_STRING;
}
	YY_BREAK
case 5:
#line 48 "pddl2.lex"
{return PDDL_Parser::TK_OPEN;}
	YY_BREAK
case 6:
#line 49 "pddl2.lex"
{return PDDL_Parser::TK_CLOSE;}
	YY_BREAK
case 7:
#line 50 "pddl2.lex"
{return PDDL_Parser::TK_OPEN_SQ;}
	YY_BREAK
case 8:
#line 51 "pddl2.lex"
{return PDDL_Parser::TK_CLOSE_SQ;}
	YY_BREAK
case 9:
#line 52 "pddl2.lex"
{return PDDL_Parser::TK_PLUS;}
	YY_BREAK
case 10:
#line 53 "pddl2.lex"
{return PDDL_Parser::TK_HYPHEN;}
	YY_BREAK
case 11:
#line 54 "pddl2.lex"
{return PDDL_Parser::TK_MUL;}
	YY_BREAK
case 12:
#line 55 "pddl2.lex"
{return PDDL_Parser::TK_DIV;}
	YY_BREAK
case 13:
#line 56 "pddl2.lex"
{return PDDL_Parser::TK_GREATER;}
	YY_BREAK
case 14:
#line 57 "pddl2.lex"
{return PDDL_Parser::TK_GREATEQ;}
	YY_BREAK
case 15:
#line 58 "pddl2.lex"
{return PDDL_Parser::TK_LESS;}
	YY_BREAK
case 16:
#line 59 "pddl2.lex"
{return PDDL_Parser::TK_LESSEQ;}
	YY_BREAK
case 17:
#line 60 "pddl2.lex"
{return PDDL_Parser::TK_COLON;}
	YY_BREAK
case 18:
#line 61 "pddl2.lex"
{return PDDL_Parser::TK_HASHT;}
	YY_BREAK
case 19:
#line 62 "pddl2.lex"
{return PDDL_Parser::TK_EQ;}
	YY_BREAK
case 20:
#line 64 "pddl2.lex"
{return PDDL_Parser::KW_REQS;}
	YY_BREAK
case 21:
#line 65 "pddl2.lex"
{return PDDL_Parser::KW_CONSTANTS;}
	YY_BREAK
case 22:
#line 66 "pddl2.lex"
{return PDDL_Parser::KW_PREDS;}
	YY_BREAK
case 23:
#line 67 "pddl2.lex"
{return PDDL_Parser::KW_FUNS;}
	YY_BREAK
case 24:
#line 68 "pddl2.lex"
{return PDDL_Parser::KW_TYPES;}
	YY_BREAK
case 25:
#line 69 "pddl2.lex"
{return PDDL_Parser::KW_DEFINE;}
	YY_BREAK
case 26:
#line 70 "pddl2.lex"
{return PDDL_Parser::KW_DOMAIN;}
	YY_BREAK
case 27:
#line 71 "pddl2.lex"
{return PDDL_Parser::KW_ACTION;}
	YY_BREAK
case 28:
#line 72 "pddl2.lex"
{return PDDL_Parser::KW_PROCESS;}
	YY_BREAK
case 29:
#line 73 "pddl2.lex"
{return PDDL_Parser::KW_EVENT;}
	YY_BREAK
case 30:
#line 74 "pddl2.lex"
{return PDDL_Parser::KW_ACTION;}
	YY_BREAK
case 31:
#line 75 "pddl2.lex"
{return PDDL_Parser::KW_ARGS;}
	YY_BREAK
case 32:
#line 76 "pddl2.lex"
{return PDDL_Parser::KW_PRE;}
	YY_BREAK
case 33:
#line 77 "pddl2.lex"
{return PDDL_Parser::KW_COND;}
	YY_BREAK
case 34:
#line 78 "pddl2.lex"
{return PDDL_Parser::KW_AT_START;}
	YY_BREAK
case 35:
#line 79 "pddl2.lex"
{return PDDL_Parser::KW_AT_END;}
	YY_BREAK
case 36:
#line 80 "pddl2.lex"
{return PDDL_Parser::KW_OVER_ALL;}
	YY_BREAK
case 37:
#line 81 "pddl2.lex"
{return PDDL_Parser::KW_EFFECT;}
	YY_BREAK
case 38:
#line 82 "pddl2.lex"
{return PDDL_Parser::KW_INVARIANT;}
	YY_BREAK
case 39:
#line 83 "pddl2.lex"
{return PDDL_Parser::KW_DURATION;}
	YY_BREAK
case 40:
#line 84 "pddl2.lex"
{return PDDL_Parser::KW_EXPANSION;}
	YY_BREAK
case 41:
#line 85 "pddl2.lex"
{return PDDL_Parser::KW_TASKS;}
	YY_BREAK
case 42:
#line 86 "pddl2.lex"
{return PDDL_Parser::KW_AND;}
	YY_BREAK
case 43:
#line 87 "pddl2.lex"
{return PDDL_Parser::KW_OR;}
	YY_BREAK
case 44:
#line 88 "pddl2.lex"
{return PDDL_Parser::KW_EXISTS;}
	YY_BREAK
case 45:
#line 89 "pddl2.lex"
{return PDDL_Parser::KW_FORALL;}
	YY_BREAK
case 46:
#line 90 "pddl2.lex"
{return PDDL_Parser::KW_IMPLY;}
	YY_BREAK
case 47:
#line 91 "pddl2.lex"
{return PDDL_Parser::KW_IFF;}
	YY_BREAK
case 48:
#line 92 "pddl2.lex"
{return PDDL_Parser::KW_NOT;}
	YY_BREAK
case 49:
#line 93 "pddl2.lex"
{return PDDL_Parser::KW_TRUE;}
	YY_BREAK
case 50:
#line 94 "pddl2.lex"
{return PDDL_Parser::KW_FALSE;}
	YY_BREAK
case 51:
#line 95 "pddl2.lex"
{return PDDL_Parser::KW_WHEN;}
	YY_BREAK
case 52:
#line 96 "pddl2.lex"
{return PDDL_Parser::KW_EITHER;}
	YY_BREAK
case 53:
#line 97 "pddl2.lex"
{return PDDL_Parser::KW_PROBLEM;}
	YY_BREAK
case 54:
#line 98 "pddl2.lex"
{return PDDL_Parser::KW_FORDOMAIN;}
	YY_BREAK
case 55:
#line 99 "pddl2.lex"
{return PDDL_Parser::KW_OBJECTS;}
	YY_BREAK
case 56:
#line 100 "pddl2.lex"
{return PDDL_Parser::KW_INIT;}
	YY_BREAK
case 57:
#line 101 "pddl2.lex"
{return PDDL_Parser::KW_GOAL;}
	YY_BREAK
case 58:
#line 102 "pddl2.lex"
{return PDDL_Parser::KW_LENGTH;}
	YY_BREAK
case 59:
#line 103 "pddl2.lex"
{return PDDL_Parser::KW_SERIAL;}
	YY_BREAK
case 60:
#line 104 "pddl2.lex"
{return PDDL_Parser::KW_PARALLEL;}
	YY_BREAK
case 61:
#line 105 "pddl2.lex"
{return PDDL_Parser::KW_SERIAL;}
	YY_BREAK
case 62:
#line 106 "pddl2.lex"
{return PDDL_Parser::KW_PARALLEL;}
	YY_BREAK
case 63:
#line 107 "pddl2.lex"
{return PDDL_Parser::KW_METRIC;}
	YY_BREAK
case 64:
#line 108 "pddl2.lex"
{return PDDL_Parser::KW_MINIMIZE;}
	YY_BREAK
case 65:
#line 109 "pddl2.lex"
{return PDDL_Parser::KW_MAXIMIZE;}
	YY_BREAK
case 66:
#line 110 "pddl2.lex"
{return PDDL_Parser::KW_DURATION_VAR;}
	YY_BREAK
case 67:
#line 111 "pddl2.lex"
{return PDDL_Parser::KW_TOTAL_TIME;}
	YY_BREAK
case 68:
#line 112 "pddl2.lex"
{return PDDL_Parser::KW_INCREASE;}
	YY_BREAK
case 69:
#line 113 "pddl2.lex"
{return PDDL_Parser::KW_DECREASE;}
	YY_BREAK
case 70:
#line 114 "pddl2.lex"
{return PDDL_Parser::KW_SCALE_UP;}
	YY_BREAK
case 71:
#line 115 "pddl2.lex"
{return PDDL_Parser::KW_SCALE_DOWN;}
	YY_BREAK
case 72:
#line 116 "pddl2.lex"
{return PDDL_Parser::KW_ASSIGN;}
	YY_BREAK
case 73:
#line 117 "pddl2.lex"
{return PDDL_Parser::KW_NUMBER;}
	YY_BREAK
case 74:
#line 118 "pddl2.lex"
{return PDDL_Parser::KW_UNDEFINED;}
	YY_BREAK
case 75:
#line 120 "pddl2.lex"
{return PDDL_Parser::KW_INVARIANT;}
	YY_BREAK
case 76:
#line 121 "pddl2.lex"
{return PDDL_Parser::KW_IRRELEVANT;}
	YY_BREAK
case 77:
#line 122 "pddl2.lex"
{return PDDL_Parser::KW_NAME;}
	YY_BREAK
case 78:
#line 123 "pddl2.lex"
{return PDDL_Parser::KW_TAG;}
	YY_BREAK
case 79:
#line 124 "pddl2.lex"
{return PDDL_Parser::KW_TAG;}
	YY_BREAK
case 80:
#line 125 "pddl2.lex"
{return PDDL_Parser::KW_TAG;}
	YY_BREAK
case 81:
#line 126 "pddl2.lex"
{return PDDL_Parser::KW_VARS;}
	YY_BREAK
case 82:
#line 127 "pddl2.lex"
{return PDDL_Parser::KW_CONTEXT;}
	YY_BREAK
case 83:
#line 128 "pddl2.lex"
{return PDDL_Parser::KW_SET_CONSTRAINT;}
	YY_BREAK
case 84:
#line 129 "pddl2.lex"
{return PDDL_Parser::KW_FORMULA;}
	YY_BREAK
case 85:
#line 130 "pddl2.lex"
{return PDDL_Parser::KW_AT_LEAST_N;}
	YY_BREAK
case 86:
#line 131 "pddl2.lex"
{return PDDL_Parser::KW_AT_MOST_N;}
	YY_BREAK
case 87:
#line 132 "pddl2.lex"
{return PDDL_Parser::KW_EXACTLY_N;}
	YY_BREAK
case 88:
#line 133 "pddl2.lex"
{return PDDL_Parser::KW_AT_LEAST_N;}
	YY_BREAK
case 89:
#line 134 "pddl2.lex"
{return PDDL_Parser::KW_AT_MOST_N;}
	YY_BREAK
case 90:
#line 135 "pddl2.lex"
{return PDDL_Parser::KW_EXACTLY_N;}
	YY_BREAK
case 91:
#line 136 "pddl2.lex"
{return PDDL_Parser::KW_SETOF;}
	YY_BREAK
case 92:
#line 137 "pddl2.lex"
{return PDDL_Parser::KW_FACT;}
	YY_BREAK
case 93:
#line 138 "pddl2.lex"
{return PDDL_Parser::KW_ASSOC;}
	YY_BREAK
case 94:
#line 140 "pddl2.lex"
{return PDDL_Parser::KW_PLAN;}
	YY_BREAK
case 95:
#line 141 "pddl2.lex"
{return PDDL_Parser::KW_HEURISTIC;}
	YY_BREAK
case 96:
#line 142 "pddl2.lex"
{return PDDL_Parser::KW_OPT;}
	YY_BREAK
case 97:
#line 143 "pddl2.lex"
{return PDDL_Parser::KW_INF;}
	YY_BREAK
case 98:
#line 144 "pddl2.lex"
{return PDDL_Parser::KW_SET;}
	YY_BREAK
case 99:
#line 146 "pddl2.lex"
{return PDDL_Parser::KW_WITHIN;}
	YY_BREAK
case 100:
#line 147 "pddl2.lex"
{return PDDL_Parser::KW_PREFERENCE;}
	YY_BREAK
case 101:
#line 148 "pddl2.lex"
{return PDDL_Parser::KW_VIOLATED;}
	YY_BREAK
case 102:
#line 150 "pddl2.lex"
{ return PDDL_Parser::KW_CONSTRAINTS; }
	YY_BREAK
case 103:
#line 151 "pddl2.lex"
{ return PDDL_Parser::KW_ALWAYS; }
	YY_BREAK
case 104:
#line 152 "pddl2.lex"
{ return PDDL_Parser::KW_SOMETIME; }
	YY_BREAK
case 105:
#line 153 "pddl2.lex"
{ return PDDL_Parser::KW_AT_MOST_ONCE; }
	YY_BREAK
case 106:
#line 154 "pddl2.lex"
{ return PDDL_Parser::KW_SOMETIME_BEFORE; }
	YY_BREAK
case 107:
#line 155 "pddl2.lex"
{ return PDDL_Parser::KW_SOMETIME_AFTER; }
	YY_BREAK
case 108:
#line 156 "pddl2.lex"
{ return PDDL_Parser::KW_ALWAYS_WITHIN; }
	YY_BREAK
case 109:
#line 158 "pddl2.lex"
{
  val.sym = _tab.inserta(yytext);
  if (val.sym->val == 0) return PDDL_Parser::TK_NEW_VAR_SYMBOL;
  if (((HSPS::PDDL_Base::Symbol*)val.sym->val)->sym_class == HSPS::PDDL_Base::sym_variable)
    return PDDL_Parser::TK_VAR_SYMBOL;
  return PDDL_Parser::TK_NEW_VAR_SYMBOL;
}
	YY_BREAK
case 110:
#line 166 "pddl2.lex"
{
  val.sym = _tab.inserta(yytext);
  return PDDL_Parser::TK_KEYWORD;
}
	YY_BREAK
case 111:
#line 171 "pddl2.lex"
{
  val.sym = _tab.inserta(yytext);
  if (val.sym->val == 0) return PDDL_Parser::TK_NEW_SYMBOL;
  else {
    if (yy_flex_debug) {
      HSPS::PDDL_Base::Symbol* s = (HSPS::PDDL_Base::Symbol*)val.sym->val;
      std::cerr << "symbol " << s->print_name
		<< " has class " << s->sym_class
		<< std::endl;
    }
    switch (((HSPS::PDDL_Base::Symbol*)val.sym->val)->sym_class) {
    case HSPS::PDDL_Base::sym_object:
      return PDDL_Parser::TK_OBJ_SYMBOL;
    case HSPS::PDDL_Base::sym_typename:
      return PDDL_Parser::TK_TYPE_SYMBOL;
    case HSPS::PDDL_Base::sym_predicate:
      return PDDL_Parser::TK_PRED_SYMBOL;
    case HSPS::PDDL_Base::sym_object_function:
      return PDDL_Parser::TK_OBJFUN_SYMBOL;
    case HSPS::PDDL_Base::sym_function:
      return PDDL_Parser::TK_FUN_SYMBOL;
    case HSPS::PDDL_Base::sym_action:
      return PDDL_Parser::TK_ACTION_SYMBOL;
    case HSPS::PDDL_Base::sym_preference:
      return PDDL_Parser::TK_PREFERENCE_SYMBOL;
    case HSPS::PDDL_Base::sym_set:
      return PDDL_Parser::TK_SET_SYMBOL;
    default:
      return PDDL_Parser::TK_MISC_SYMBOL;
    }
  }
}
	YY_BREAK
case 112:
#line 204 "pddl2.lex"
val.ival = atoi(yytext); return PDDL_Parser::TK_INT;
	YY_BREAK
case 113:
#line 205 "pddl2.lex"
val.rval = N_TO_NN(A_TO_N(yytext)); return PDDL_Parser::TK_FLOAT;
	YY_BREAK
case 114:
#line 207 "pddl2.lex"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();
#line 493 "/usr/local/lib/flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 541 "/usr/local/lib/flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_PDDL_Scanner_DEBUG != 0
#ifndef YY_PDDL_Scanner_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_PDDL_Scanner_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_PDDL_Scanner_CHAR *dest = YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf;
    register YY_PDDL_Scanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_PDDL_Scanner_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_PDDL_Scanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
#line 717 "/usr/local/lib/flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 538 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 721 "/usr/local/lib/flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_PDDL_Scanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 538 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 537);
#line 755 "/usr/local/lib/flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_PDDL_Scanner_CHAR c, register YY_PDDL_Scanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_PDDL_Scanner_CHAR c;
register YY_PDDL_Scanner_CHAR *yy_bp;
#endif
#else
void YY_PDDL_Scanner_CLASS::yyunput( YY_PDDL_Scanner_CHAR c, YY_PDDL_Scanner_CHAR *yy_bp )
#endif

    {
    register YY_PDDL_Scanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_PDDL_Scanner_CHAR *dest =
	    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_PDDL_Scanner_CHAR *source =
	    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_PDDL_Scanner_CLASS::input()
#endif
    {
    int c;
    YY_PDDL_Scanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_PDDL_Scanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_RESTART( YY_PDDL_Scanner_IFILE  *input_file )
#else
void YY_PDDL_Scanner_RESTART( input_file )
YY_PDDL_Scanner_IFILE  *input_file;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_RESTART ( YY_PDDL_Scanner_IFILE  *input_file )
#endif

    {
    YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, input_file );
    YY_PDDL_Scanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_PDDL_Scanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_PDDL_Scanner_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_PDDL_Scanner_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_PDDL_Scanner_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_PDDL_Scanner_CURRENT_BUFFER = new_buffer;
    YY_PDDL_Scanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_LOAD_BUFFER_STATE( void )
#else
void YY_PDDL_Scanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_PDDL_Scanner_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_PDDL_Scanner_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_PDDL_Scanner_CREATE_BUFFER( YY_PDDL_Scanner_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_PDDL_Scanner_CREATE_BUFFER( file, size )
YY_PDDL_Scanner_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_CREATE_BUFFER( YY_PDDL_Scanner_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_PDDL_Scanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_PDDL_Scanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_PDDL_Scanner_CREATE_BUFFER()" );

    YY_PDDL_Scanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_PDDL_Scanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_PDDL_Scanner_CURRENT_BUFFER )
	YY_PDDL_Scanner_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_PDDL_Scanner_IFILE  *file )
#else
void YY_PDDL_Scanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_PDDL_Scanner_IFILE  *file;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_PDDL_Scanner_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 207 "pddl2.lex"


int yywrap() {
  return 1;
}

void PDDL_Scanner::open_file(char* name, bool trace) {
  yy_flex_debug = trace;
  yyin = fopen(name, "r");
  if (!yyin) {
    std::cerr << "error: can't open " << name << std::endl;
    exit(255);
  }
  _filename = name;
  if (_reset) yy_init_buffer(YY_PDDL_Scanner_CURRENT_BUFFER, yyin);
  _reset = true;
  _line_no = 1;
  _trace_line = trace;
}

void PDDL_Scanner::close_file() {
  if (_filename != 0) {
    fclose(yyin);
    _filename = 0;
  }
}
