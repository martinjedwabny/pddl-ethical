#define YY_CHAR char
#line 1 "/home/pahas/scratch/lib/flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
/* #include <osfcn.h> */
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "pddl2.lex"
#define INITIAL 0
#define YY_PDDL_Scanner_FLEX_SCANNER
/* CHAR [a-zA-Z_] */
#include "scanner.h"
#line 37 "pddl2.lex"
#line 196 "/home/pahas/scratch/lib/flexskel.cc"

#define yy___stderr YY_PDDL_Scanner_ERRFILE
#define yy___text YY_PDDL_Scanner_TEXT
#define yy___leng YY_PDDL_Scanner_LENG
#define yy___in YY_PDDL_Scanner_IN
#define yy___out YY_PDDL_Scanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, yy___in ); \
		YY_PDDL_Scanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_PDDL_Scanner_DEBUG != 0
#define yy___flex_debug YY_PDDL_Scanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_PDDL_Scanner_ECHO
#define yy___input YY_PDDL_Scanner_INPUT
#define yy___fatal_error YY_PDDL_Scanner_FATAL_ERROR
#define yy___wrap YY_PDDL_Scanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_PDDL_Scanner_IFILE  *yy_input_file;

    YY_PDDL_Scanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_PDDL_Scanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_PDDL_Scanner_DEBUG != 0
int YY_PDDL_Scanner_DEBUG_FLAG=YY_PDDL_Scanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_PDDL_Scanner_CURRENT_BUFFER
static YY_BUFFER_STATE YY_PDDL_Scanner_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_PDDL_Scanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_PDDL_Scanner_CHAR *yy___text;
int yy___leng;

YY_PDDL_Scanner_IFILE  *yy___in = (YY_PDDL_Scanner_IFILE  *) 0;
YY_PDDL_Scanner_OFILE *yy___out = (YY_PDDL_Scanner_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_PDDL_Scanner_CHAR *yy_c_buf_p = (YY_PDDL_Scanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_PDDL_Scanner_CHAR c, YY_PDDL_Scanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_PDDL_Scanner_ECHO_NOCODE
void YY_PDDL_Scanner_CLASS::yy___echo()
{YY_PDDL_Scanner_ECHO_CODE
}
#endif
#ifndef YY_PDDL_Scanner_INPUT_NOCODE
int  YY_PDDL_Scanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_PDDL_Scanner_INPUT_CODE
}
#endif
#ifndef YY_PDDL_Scanner_FATAL_ERROR_NOCODE
void YY_PDDL_Scanner_CLASS::yy___fatal_error(char *msg)
{YY_PDDL_Scanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_PDDL_Scanner_WRAP_NOCODE
int  YY_PDDL_Scanner_CLASS::yy___wrap()
{YY_PDDL_Scanner_WRAP_CODE
}
#endif
void YY_PDDL_Scanner_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_PDDL_Scanner_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_PDDL_Scanner_DEBUG != 0
 YY_PDDL_Scanner_DEBUG_FLAG=YY_PDDL_Scanner_DEBUG_INIT;
#endif
}

YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_CLASS(YY_PDDL_Scanner_CONSTRUCTOR_PARAM) YY_PDDL_Scanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_PDDL_Scanner_CONSTRUCTOR_CODE;
}
YY_PDDL_Scanner_CLASS::~YY_PDDL_Scanner_CLASS() 
{YY_PDDL_Scanner_DESTRUCTOR_CODE;
 if(YY_PDDL_Scanner_CURRENT_BUFFER)
  YY_PDDL_Scanner_DELETE_BUFFER(YY_PDDL_Scanner_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 114
typedef int yy_state_type;
static const short int yy_accept[567] =
    {   0,
      111,  111,  114,  113,    1,    3,  113,  113,    5,    6,
       11,    9,   10,   12,  111,   17,    2,   15,   19,   13,
      113,    7,    8,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,    1,    0,    4,    0,
       18,  111,  112,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,    2,   16,   14,  108,  108,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,   47,  110,  110,  110,  110,  110,
      110,  110,  110,  110,    4,  112,  109,  109,  109,  109,

      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  108,
      108,  108,  110,   46,  110,    0,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,   51,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,   96,  109,  109,  109,  109,  109,
      109,  109,  109,   95,  109,  109,  109,  109,  109,  109,
       97,  109,   77,  109,  109,  109,  108,  110,  110,    0,

        0,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   52,  110,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,   91,  109,  109,   58,
      109,   57,  109,  109,   79,  109,  109,   76,  109,  109,
       93,  109,  109,  109,  109,  109,  109,  109,  109,   78,
       80,  108,  110,  110,    0,    0,  110,  110,  110,  110,
      110,  110,  110,  110,  110,   50,  110,  110,  110,  110,
        0,  110,  110,  110,   90,  110,  110,  110,  110,  109,
       92,  109,  109,  109,  109,  109,  109,  109,   29,  109,

      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,   45,   24,
      108,  102,   73,   37,    0,  110,  110,  110,   25,   26,
       53,  110,   48,   49,  110,  110,  110,  110,    0,  110,
      110,  110,  110,  110,   83,   98,   27,  109,  109,  109,
      109,   55,  109,   39,  109,  109,  109,  109,  109,  109,
      109,  109,   59,   64,  109,  109,  109,  109,  109,  109,
      109,   60,  109,  109,  108,  110,    0,  110,   88,  110,
       89,  110,  110,  110,  110,    0,  110,   54,  110,  110,
      110,  110,  109,  109,  109,   81,  109,  109,  109,  109,

      109,  109,  109,  109,  109,  109,   56,  109,  109,  109,
      109,   28,  109,  109,  109,  109,  108,  110,   36,   87,
      110,   70,  110,   69,  110,   66,   65,   38,  110,  110,
       71,  103,  110,  109,  109,  109,   43,  109,  109,  109,
      109,  109,  109,  109,  109,  109,   61,  109,  109,  109,
      109,  109,  109,  109,   67,  110,  110,   85,  110,   86,
      110,  110,  110,  110,  110,   33,   21,  109,  109,  109,
       44,  109,   23,   94,  109,   42,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  110,   84,  110,  110,   99,
       72,  110,  110,   68,  109,  109,  109,  109,  109,   75,

      109,   31,  109,   22,  109,  109,  109,  109,  110,  110,
      100,  110,  110,  101,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  110,  104,  110,  110,  109,  109,
       41,  109,  109,   32,   20,  109,  109,  109,  107,  110,
      110,  109,  109,  109,  109,   62,  109,  109,  106,  110,
      109,  109,   40,  109,   82,  109,  105,   30,  109,   63,
      109,   35,  109,  109,   34,    0
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,   19,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       20,   21,   22,    1,   23,    1,   24,   25,   26,   27,

       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,    1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[50] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    3,    3,
        3,    1,    3,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4
    } ;

static const short int yy_base[576] =
    {   0,
        0,    0, 1482, 1483, 1479, 1483,   46, 1437, 1483, 1483,
     1483, 1483, 1466, 1483,   40,   45,    0, 1461, 1483, 1460,
     1449, 1483, 1483,   46,   87,   71,   84,   23,   75,  101,
       97,  110,  119,  131,  137,  150, 1473,   99, 1483,  137,
     1483,   51, 1461,  181,  191,  141,  167,  177,  186,  187,
      122,  190,  145,  144,  195,   81,  209,  212,  213,  214,
      219,  220,    0, 1483, 1483,  255,  265,    0,  169,  243,
      232,  257,  277,  262,  258,  276,  284,  285,  292,  299,
      307,  306,  310,  313,  314,  329,  332,  335,  336,  340,
      343,  349,  354,  357,  276, 1460,    0,  154,  363,  251,

      365,  367,  370,  368,  323,  373,  378,  372,  382,  390,
      397,  387,  396,  392,  400,  409,  410,  414,  421,  417,
      423,  431,  440,  432,  443,  451,  441,  450,  453,    0,
     1428,  105,  472,  471,  475,  100,  214,  476,  480,  495,
      494,  498,  501,  514,  509,  520, 1426,  525,  528,  536,
      539,  543,  550,  556,  557,  561,  572,  564,  575,  578,
      579,  581,  588,  544,  594,  596,  607,  508,  601,  419,
      602,  489,  606,  609,  603,  611,  616,  629,  620,  626,
      633,  635,  638,  634,  641,  644,  646,  643,  652,  658,
      669,  656,  661,  665,  676,  663,  277,  682,  686, 1433,

     1426, 1440, 1429,  687,  691,  695,  706,  709,  710,  723,
      717,  728, 1434,  731,  734,  748,  745,  749,  752,  753,
      766,  767,  770,  773,  784,  777,  667,  781,  788,  792,
      795,  798,  680, 1426,  800,  791,  700,  803,  806,  809,
      818,  820,  813,  821,  827,  831,  833,  835,  838,  846,
      841,  852,  844,  859,  863,  842, 1438,  865,  867,  870,
      871,  263,  872,  878, 1436, 1438, 1437, 1418,  893,  892,
      896,  897,  901,  914,  915,  919,  920, 1407,  923,  934,
      113,  937,  941,  954,  945,  958,  967,  959,  963,  972,
      928,  968,  978,  980,  981,  989,  982, 1395,  986,  987,

     1006, 1004,  991, 1011, 1008, 1013, 1012, 1000, 1018, 1021,
     1023, 1031, 1032, 1033, 1036, 1041, 1388, 1054, 1040, 1043,
      340, 1060, 1053, 1483, 1383, 1375, 1349, 1061, 1064, 1067,
     1078, 1081, 1082, 1085, 1086, 1344, 1089, 1104, 1326, 1105,
     1108,  302, 1109, 1304, 1113, 1122, 1058, 1123, 1126, 1130,
     1131, 1133, 1138, 1135, 1291, 1152, 1272, 1143, 1144, 1153,
     1165, 1156, 1164, 1166, 1167, 1171, 1174, 1176, 1186, 1178,
     1193, 1201, 1217, 1201,  182, 1187, 1183, 1182, 1213, 1196,
     1204, 1203, 1191, 1210, 1211, 1170, 1218, 1219, 1158, 1132,
     1224, 1135, 1225, 1227, 1232, 1233, 1234, 1240, 1140, 1235,

     1133, 1246, 1252, 1255, 1253, 1261, 1254, 1263, 1265, 1260,
     1273, 1275, 1278, 1123, 1098, 1085,  443, 1093, 1483, 1112,
      453, 1280, 1084, 1283, 1075, 1284, 1297, 1483, 1298, 1055,
        0, 1303, 1061, 1301, 1302, 1308, 1304, 1322, 1056, 1314,
     1043, 1307, 1311, 1043, 1316, 1326, 1329, 1328, 1331, 1334,
     1339, 1024, 1002,  975,  955,  938,  939,    0,  937,    0,
      940, 1349,  922,  715,  909, 1340, 1346, 1352,  908,  891,
     1354,  898, 1357, 1358,  882, 1359, 1360,  868, 1363, 1365,
     1364, 1367,  865,  858,  866,  848,    0,  845,  831, 1382,
        0,  807,  797,    0, 1372,  780,  773,  771,  760, 1385,

      760, 1386, 1387, 1389, 1390,  755,  744,  726,  731,  718,
        0,  698,  702, 1392,  658,  660,  596,  606,  571, 1393,
     1395,  554,  561,  542,  536,    0,  531,  517,  517,  498,
        0,  504,  498, 1396, 1397,  485,  474,  478,    0,  447,
      440,  432,  416,  401,  387,    0,  347,  322,    0,  315,
      291,  286,    0,  267,    0,  249,    0,    0,  215,    0,
      183,    0,  146,   64,    0, 1483, 1439, 1443,   48, 1445,
     1447, 1449, 1451, 1453, 1455
    } ;

static const short int yy_def[576] =
    {   0,
      566,    1,  566,  566,  566,  566,  567,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  568,  566,  566,  566,
      569,  566,  566,  570,  570,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   34,   34,  566,  567,  566,  567,
      566,  566,  566,  571,  571,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,  568,  566,  566,  572,  572,  573,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,  567,  566,  574,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,  575,
       67,   67,   34,   34,   34,  566,  573,   34,   34,   34,
       34,   34,   34,   34,   34,   34,  573,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   67,   34,   34,  566,

      566,  573,  573,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  573,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   45,   45,   45,   45,   45,
       45,   45,   45,  574,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,  574,   45,   45,   45,
       45,   67,   34,   34,  566,  566,  573,  573,   34,   34,
       34,   34,   34,   34,   34,   34,   34,  573,   34,   34,
      566,   34,   34,   34,   34,   34,   34,   34,   34,   45,
       45,   45,   45,   45,   45,   45,   45,  574,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,  574,   45,   45,   45,
       67,   34,   34,  566,  566,  573,  573,   34,   34,   34,
       34,   34,   34,   34,   34,  573,   34,   34,  566,   34,
       34,  573,   34,  573,   34,   34,   45,   45,   45,   45,
       45,   45,   45,   45,  574,   45,  574,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,  574,  574,   67,  573,  566,  573,  573,   34,
       34,   34,  573,   34,   34,  566,   34,   34,  573,  573,
       34,  573,   45,   45,   45,   45,   45,   45,  574,   45,

      574,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,  574,  574,  574,   67,  573,  566,  573,
      573,   34,  573,   34,  573,   34,   34,  566,   34,  573,
      573,   34,  573,   45,   45,   45,   45,   45,  574,   45,
      574,   45,   45,  574,   45,   45,   45,   45,   45,   45,
       45,  574,  574,  574,   67,  573,  573,  573,  573,  573,
      573,   34,  573,  573,  573,   45,   45,   45,  574,  574,
       45,  574,   45,   45,  574,   45,   45,  574,   45,   45,
       45,   45,  574,  574,  574,  573,  573,  573,  573,   34,
      573,  573,  573,  573,   45,  574,  574,  574,  574,   45,

      574,   45,   45,   45,   45,  574,  574,  574,  573,  573,
      573,  573,  573,   45,  574,  574,  574,  574,  574,   45,
       45,  574,  574,  574,  573,  573,  573,  573,  574,  574,
      574,  574,  574,   45,   45,  574,  574,  574,  573,  573,
      573,  574,  574,  574,  574,  574,  574,  574,  573,  573,
      574,  574,  574,  574,  574,  574,  573,  574,  574,  574,
      574,  574,  574,  574,  574,    0,  566,  566,  566,  566,
      566,  566,  566,  566,  566
    } ;

static const short int yy_nxt[1533] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
        4,   14,   15,   16,   17,   18,   19,   20,   21,   22,
        4,   23,   24,   25,   24,   24,   26,   27,   28,   24,
       24,   29,   24,   24,   24,   30,   31,   32,   33,   24,
       24,   34,   35,   24,   24,   36,   24,   24,   24,   39,
       43,   66,   42,   68,   68,   68,   68,   69,   68,   69,
       78,   43,   68,   42,   69,   69,   40,   44,   45,   44,
       46,   47,   48,   49,   50,   51,   52,   44,   53,   54,
       55,   56,   57,   58,   44,   59,   60,   61,   44,   62,
       44,   44,   44,   44,   68,   68,   68,   68,   74,   68,

      565,  136,   39,   68,  118,   69,   98,   69,   75,   69,
       79,   80,   69,   69,  281,   76,   81,   69,   69,   40,
       69,   70,   98,   71,   82,   69,   69,  200,   72,   73,
       77,   69,   83,   69,   84,   69,  339,   69,   69,   69,
       95,  201,   69,   69,   69,  197,   69,   98,  131,  112,
       85,   69,   69,   69,   86,   69,   88,   40,   89,   87,
       69,   69,   69,   98,   69,   69,   98,   69,   90,   98,
       98,  116,   69,   69,   91,   69,  115,   69,  101,   98,
       93,   94,   98,  564,   92,   98,   98,   69,   97,   97,
       97,   97,   98,   97,   69,   98,   69,   97,   97,   97,

       97,   97,   98,   97,  102,  104,   69,   97,   98,  108,
      103,   98,   98,  105,  563,   98,   99,  109,   98,  417,
       98,  106,  117,  107,  111,  131,  113,   98,   98,  110,
      114,   98,  100,  119,   98,  121,   98,   98,   98,   98,
      124,  125,  127,  129,   98,   98,  122,  120,  202,  203,
       98,  562,  123,   98,   98,   98,  126,   69,  134,   69,
       98,   98,  130,  130,  130,  130,  128,  130,   69,   69,
       69,  130,  130,  130,  130,  130,   98,  130,  136,   39,
       69,  130,   69,   69,   69,   69,  137,  138,  133,   69,
      139,  561,  162,  140,   69,   69,   40,  560,  135,   69,

      262,   69,   69,   69,   69,  321,  131,  142,  132,   69,
       69,   69,   69,   69,   69,  143,  147,   69,  141,   69,
      131,   69,   69,  559,  146,  144,   69,  558,  389,   69,
      145,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,  557,   69,   69,  390,  149,   69,   98,  167,
       69,   69,  148,  556,   69,  150,  151,   69,  154,  152,
       69,   69,   69,   69,   98,   69,   69,   69,   69,  153,
       69,  375,   69,   69,   69,  156,   69,   69,  155,   69,
       69,  159,   69,  131,   69,  157,   69,  158,   98,  555,
       98,   69,   98,   98,   69,   98,  166,  170,   98,  160,

      168,  163,  164,   98,   98,  161,   98,   98,   98,   98,
      165,   98,   98,   98,   98,   98,  169,   98,  171,   98,
      173,   98,   98,   98,  175,   98,  172,  176,   98,  554,
      174,   98,  178,   98,   98,   98,  179,   98,   98,   98,
      177,   98,   98,  553,   98,  180,   98,  552,   98,  182,
       98,   98,  181,  183,  186,   98,   98,   98,   98,  184,
       98,  237,   98,  185,   98,   98,   98,  187,   98,  551,
      193,  189,   98,   98,  192,   98,   98,  188,   98,  455,
      550,   98,  194,  190,   98,  191,  131,  549,  195,  458,
      459,   98,   98,  196,   98,  198,   69,   69,   69,   69,

       69,   69,   69,   69,  548,   69,  199,   69,   69,   69,
      547,  205,   69,   69,  239,  546,  204,   69,  206,   69,
       69,   69,   69,  208,  207,   69,   69,  545,   69,  544,
       98,   69,   69,   98,   69,   69,   69,  210,   69,   69,
      543,   69,  209,  211,  235,   69,   69,   69,  542,   98,
       69,   69,   69,   69,  541,   69,  214,   69,  540,  215,
      212,   69,   69,   69,   69,   69,   69,  231,   69,   98,
       69,  217,  539,   69,  218,   69,   69,   69,  538,  216,
       69,   69,   69,   69,   69,   98,   69,   69,  221,   69,
      219,  223,  537,   69,  220,  222,  536,   69,   69,   69,

       69,   69,   69,   69,   98,   69,   98,  533,  225,   69,
      226,  224,   69,   98,  228,   69,  234,  232,  227,   98,
       98,   98,   98,  233,  236,  238,   98,   98,   98,  229,
      230,   98,   98,  532,   98,   98,   98,   98,  531,  243,
      240,   98,   98,   98,   98,   98,  245,   98,   98,  241,
       98,   98,   98,  242,   98,  246,  244,   98,   98,   98,
       98,   98,  248,   98,  250,  249,   98,   98,  254,   98,
       98,  252,  253,  247,   98,   98,   98,   98,  257,   98,
      251,   98,   98,   98,   98,   98,   98,   98,   98,  256,
       98,  530,  291,   98,   98,  255,  258,   98,  259,   98,

      529,   98,   98,  260,  261,  297,   98,   69,   98,   69,
       98,   69,   69,   69,  269,  264,   69,   98,   69,   69,
       69,   98,   69,   69,   69,   98,  271,  270,   69,  263,
      528,   69,   69,  272,   69,   69,   69,   69,  492,  493,
      527,   98,   69,   69,   69,  526,   69,   69,   69,  281,
       69,  273,  274,   69,   69,  277,   69,  275,   69,   69,
       69,   69,  525,  524,  276,   69,  279,  523,   69,  280,
       69,   69,  282,   69,   69,   69,   69,   69,   69,  284,
       69,  285,   69,  283,  522,   69,   69,  519,  518,   69,
       69,   69,   69,   69,   69,   69,  517,   69,   69,  516,

       69,  287,   98,   69,   69,  515,   98,  288,  286,   69,
       69,   69,  292,   98,  290,  289,   98,   98,   98,  294,
       98,   69,   98,   98,  513,   98,  295,  300,   98,   98,
      293,   98,   98,   98,   98,  512,   98,  301,   98,   98,
      296,   98,  299,   98,   98,   98,   98,   98,  302,  303,
       98,  304,   98,  305,   98,  306,   98,  511,   98,   98,
       98,   98,   98,  309,  308,  316,   98,   98,   98,   98,
      510,   98,   98,  307,   98,  313,   98,   98,  509,   98,
      310,  311,   98,   98,   98,   98,  314,   98,   98,  312,
       98,  508,   98,   98,  315,   98,   98,   69,  507,   69,

       98,  506,  501,   69,   98,   69,   98,  318,  319,   69,
      499,  320,   98,  322,  323,   69,  328,   69,   69,  329,
       69,   69,   69,   69,   69,  498,   69,  497,   69,   69,
       69,  496,  330,   69,   69,  332,  494,  331,   69,   69,
       69,   69,   69,  335,   69,   69,   69,   69,   69,  334,
       69,   69,   69,   98,  337,  333,   69,   69,  491,   69,
       69,   69,   69,  342,   69,  338,   69,  489,  341,   98,
       69,   69,   69,  488,   69,  487,  344,  340,   69,   69,
      486,   69,   69,   69,   69,   69,   69,  345,   69,  343,
       69,   69,   69,   98,   69,   69,   69,   98,  131,  346,

       69,  349,  485,   98,   69,   98,   98,   98,  347,   98,
      348,   98,   98,   98,   98,  357,   98,  352,  350,   98,
      353,   98,   98,   98,  354,  364,  351,   98,  356,   98,
       98,   98,  359,   98,  360,  358,   98,   98,   98,  361,
      362,   98,  363,   98,  484,   98,   98,   98,   98,   98,
      367,  483,   98,   98,   98,  366,   98,  369,   98,   98,
      365,   98,   98,  374,   98,   98,   98,  368,   98,  376,
      475,  472,   98,   98,  370,  372,  371,   98,   69,   98,
       69,   98,   98,   98,   98,   69,   69,   69,   69,   69,
       69,   69,   69,  470,   69,   98,  465,   69,   69,   98,

      463,   69,  380,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,  461,   69,   69,
      460,  457,   69,   69,  456,  454,   69,  382,  381,   69,
       69,   69,  387,   69,   69,   69,   69,  384,   69,  453,
       69,   69,   69,  388,  391,   69,   69,   69,   98,   69,
       69,   98,  385,  395,  393,   98,   98,  452,   98,   69,
       98,  441,  394,   98,   98,  439,  433,   98,   98,   98,
      431,   98,   98,  396,   98,  397,   98,   98,   98,   98,
      402,   98,  398,  400,   98,   98,  403,  404,  405,   98,
       98,   98,   98,   98,   98,  430,   98,   98,  408,   98,

      406,   98,  410,   98,  428,   98,   98,   98,  407,  411,
      414,   98,   98,  423,  425,   98,  409,   98,   98,  412,
      413,   69,  421,  422,  420,  419,   98,   98,   69,   69,
      424,   69,  418,   69,   98,   69,   69,  426,  427,  416,
       69,   69,   98,   69,   69,   69,   69,   69,   69,   69,
       98,  432,   98,  415,  429,   69,   69,   98,   98,   98,
       98,   69,  434,  436,  444,   98,   98,  438,   98,  435,
      437,   98,  440,   98,   98,   98,   98,   98,   98,   98,
       98,   98,  442,  443,  446,   98,   98,   98,   98,  445,
       98,  449,  448,   98,   98,   98,   98,  447,   98,  401,

       98,   98,   98,   98,   98,   69,   98,   69,   69,   69,
       69,   69,  464,  451,   98,  450,   98,   69,  399,   98,
       69,   69,   69,  462,   69,   69,   98,   98,   69,   98,
       69,  469,   98,   98,   69,   69,  474,  466,  478,   98,
       69,   98,   98,  467,  468,   98,  392,   98,  473,   98,
      471,   98,   98,   98,   98,   98,   98,   98,  476,   98,
      386,  481,  477,   98,   98,   98,  482,   98,  479,   98,
       98,   98,   98,  480,   69,   98,  490,   98,  383,   98,
       98,   98,   98,   98,   98,   98,   69,   98,   98,   98,
       98,  379,   98,   98,  495,   98,  503,   98,   98,   98,

       98,   98,  500,  505,  502,  504,   98,   69,   98,   69,
       98,   98,   98,  514,   98,   98,  378,   98,   98,   69,
       98,   98,   98,  377,  520,  373,   98,   98,   98,  534,
       98,   98,  521,   98,   98,  355,  535,   98,   98,   38,
       38,   38,   38,   63,  336,   63,   63,   69,   69,   98,
       98,  131,  131,   68,   68,   97,   97,  130,  130,  327,
      326,  325,  324,  317,  298,  278,  268,  267,  266,  265,
      213,  131,   96,   96,   37,   67,   65,   64,   42,   41,
       37,  566,    3,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566
    } ;

static const short int yy_chk[1533] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    7,
       15,  569,   15,   24,   24,   24,   24,   28,   24,   28,
       28,   42,   24,   42,   28,   28,    7,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   25,   25,   25,   25,   26,   25,

      564,  136,   38,   25,   56,   26,   56,   26,   26,   29,
       29,   29,   26,   26,  281,   27,   29,   29,   27,   38,
       27,   25,   56,   25,   30,   27,   27,  136,   25,   25,
       27,   31,   30,   31,   31,   30,  281,   30,   31,   31,
       40,  136,   30,   30,   32,  132,   32,   51,  132,   51,
       32,   32,   32,   33,   32,   33,   34,   40,   34,   33,
       33,   33,   35,   51,   35,   34,   46,   34,   34,   54,
       53,   54,   34,   34,   35,   36,   53,   36,   46,   98,
       36,   36,   46,  563,   35,   54,   53,   36,   44,   44,
       44,   44,   47,   44,   69,   98,   69,   44,   45,   45,

       45,   45,   48,   45,   47,   48,   69,   45,   47,   49,
       47,   49,   50,   48,  561,   52,   45,   49,   48,  375,
       55,   48,   55,   48,   50,  375,   52,   49,   50,   49,
       52,   52,   45,   57,   57,   58,   55,   58,   59,   60,
       59,   60,   61,   62,   61,   62,   58,   57,  137,  137,
       57,  559,   58,   58,   59,   60,   60,   71,   71,   71,
       61,   62,   66,   66,   66,   66,   61,   66,   70,   71,
       70,   66,   67,   67,   67,   67,  100,   67,   73,   95,
       70,   67,   72,   75,   72,   75,   73,   74,   70,   74,
       74,  556,  100,   75,   72,   75,   95,  554,   72,   74,

      197,   76,   73,   76,   73,  262,  262,   77,   67,   77,
       78,   77,   78,   76,   73,   77,   81,   79,   76,   79,
      197,   77,   78,  552,   80,   78,   80,  551,  342,   79,
       79,   82,   81,   82,   81,   83,   80,   83,   84,   85,
       84,   85,  550,   82,   81,  342,   83,   83,  105,  105,
       84,   85,   82,  548,   86,   84,   86,   87,   88,   87,
       88,   89,   88,   89,  105,   90,   86,   90,   91,   87,
       91,  321,   88,   89,   92,   90,   92,   90,   89,   93,
       91,   93,   94,  321,   94,   91,   92,   92,   99,  547,
      101,   93,  102,  104,   94,  103,  104,  108,  106,   94,

      106,  101,  102,  107,   99,   99,  101,  109,  102,  104,
      103,  103,  112,  108,  106,  110,  107,  114,  109,  107,
      111,  113,  111,  109,  113,  115,  110,  113,  112,  545,
      112,  110,  114,  114,  116,  117,  115,  113,  111,  118,
      113,  115,  120,  544,  170,  116,  119,  543,  121,  118,
      116,  117,  117,  119,  122,  118,  122,  124,  120,  120,
      170,  170,  119,  121,  121,  123,  127,  123,  125,  542,
      127,  124,  122,  124,  126,  128,  126,  123,  129,  417,
      541,  123,  127,  125,  125,  125,  417,  540,  128,  421,
      421,  128,  126,  129,  129,  133,  134,  133,  134,  133,

      135,  138,  135,  138,  538,  139,  135,  139,  134,  133,
      537,  139,  135,  138,  172,  536,  138,  139,  140,  141,
      140,  141,  140,  142,  141,  142,  143,  533,  143,  532,
      172,  141,  140,  168,  145,  142,  145,  144,  143,  144,
      530,  144,  143,  145,  168,  146,  145,  146,  529,  168,
      148,  144,  148,  149,  528,  149,  148,  146,  527,  149,
      146,  150,  148,  150,  151,  149,  151,  164,  152,  164,
      152,  152,  525,  150,  153,  153,  151,  153,  524,  151,
      152,  154,  155,  154,  155,  164,  156,  153,  156,  158,
      154,  158,  523,  154,  155,  157,  522,  157,  156,  157,

      159,  158,  159,  160,  161,  160,  162,  519,  160,  157,
      161,  159,  159,  163,  163,  160,  167,  165,  162,  165,
      161,  166,  162,  166,  169,  171,  169,  171,  175,  163,
      163,  173,  167,  518,  174,  165,  176,  166,  517,  177,
      173,  177,  169,  171,  175,  179,  179,  173,  167,  174,
      174,  180,  176,  176,  178,  180,  178,  177,  181,  184,
      182,  179,  182,  183,  185,  183,  185,  180,  188,  186,
      178,  187,  187,  181,  181,  184,  182,  189,  191,  183,
      186,  192,  185,  190,  188,  186,  193,  187,  196,  190,
      194,  516,  227,  189,  191,  189,  192,  192,  194,  190,

      515,  195,  193,  195,  196,  233,  194,  198,  227,  198,
      191,  199,  204,  199,  204,  199,  205,  195,  205,  198,
      206,  233,  206,  199,  204,  237,  206,  205,  205,  198,
      513,  207,  206,  207,  208,  209,  208,  209,  464,  464,
      512,  237,  211,  207,  211,  510,  208,  209,  210,  216,
      210,  208,  209,  212,  211,  212,  214,  210,  214,  215,
      210,  215,  509,  508,  211,  212,  214,  507,  214,  215,
      217,  215,  217,  216,  218,  216,  218,  219,  220,  219,
      220,  220,  217,  218,  506,  216,  218,  501,  499,  219,
      220,  221,  222,  221,  222,  223,  498,  223,  224,  497,

      224,  222,  226,  221,  222,  496,  228,  223,  221,  225,
      224,  225,  228,  229,  226,  225,  236,  230,  226,  230,
      231,  225,  228,  232,  493,  235,  231,  236,  238,  229,
      229,  239,  236,  230,  240,  492,  231,  238,  243,  232,
      232,  235,  235,  241,  238,  242,  244,  239,  239,  241,
      240,  242,  245,  243,  243,  244,  246,  489,  247,  241,
      248,  242,  244,  249,  247,  256,  251,  256,  245,  253,
      488,  250,  246,  246,  247,  253,  248,  252,  486,  249,
      250,  250,  251,  256,  254,  253,  254,  250,  255,  252,
      258,  485,  259,  252,  255,  260,  261,  263,  484,  263,

      254,  483,  478,  264,  255,  264,  258,  258,  259,  263,
      475,  260,  261,  263,  264,  264,  269,  270,  269,  270,
      269,  271,  272,  271,  272,  472,  273,  470,  273,  270,
      269,  469,  271,  271,  272,  273,  465,  272,  273,  274,
      275,  274,  275,  277,  276,  277,  276,  277,  279,  275,
      279,  274,  275,  291,  279,  274,  276,  277,  463,  280,
      279,  280,  282,  284,  282,  280,  283,  461,  283,  291,
      285,  280,  285,  459,  282,  457,  287,  282,  283,  284,
      456,  284,  285,  286,  288,  286,  288,  288,  289,  286,
      289,  284,  287,  292,  287,  286,  288,  290,  455,  289,

      289,  293,  454,  293,  287,  294,  295,  297,  290,  292,
      292,  299,  300,  290,  296,  301,  303,  295,  293,  293,
      296,  294,  295,  297,  297,  308,  294,  299,  300,  302,
      296,  301,  303,  305,  304,  302,  304,  307,  306,  305,
      306,  308,  307,  309,  453,  302,  310,  301,  311,  305,
      311,  452,  304,  307,  306,  310,  312,  313,  314,  309,
      309,  315,  310,  318,  311,  319,  316,  312,  320,  322,
      444,  441,  312,  313,  314,  316,  315,  315,  323,  318,
      323,  319,  316,  347,  320,  322,  328,  322,  328,  329,
      323,  329,  330,  439,  330,  318,  433,  322,  328,  347,

      430,  329,  328,  331,  330,  331,  332,  333,  332,  333,
      334,  335,  334,  335,  337,  331,  337,  425,  332,  333,
      423,  420,  334,  335,  418,  416,  337,  335,  332,  338,
      340,  338,  340,  341,  343,  341,  343,  337,  345,  415,
      345,  338,  340,  341,  343,  341,  343,  346,  348,  346,
      345,  349,  338,  350,  348,  350,  351,  414,  352,  346,
      354,  401,  349,  353,  348,  399,  392,  349,  358,  359,
      390,  350,  351,  351,  352,  353,  354,  356,  360,  353,
      358,  362,  353,  356,  358,  359,  359,  360,  361,  363,
      361,  364,  365,  356,  360,  389,  366,  362,  366,  367,

      362,  368,  368,  370,  386,  363,  361,  364,  365,  369,
      372,  369,  366,  381,  383,  367,  367,  368,  371,  370,
      371,  380,  379,  380,  378,  377,  372,  369,  382,  381,
      382,  381,  376,  380,  371,  384,  385,  384,  385,  374,
      382,  381,  372,  387,  388,  387,  388,  384,  385,  391,
      393,  391,  394,  373,  387,  387,  388,  395,  396,  397,
      400,  391,  393,  395,  404,  398,  393,  398,  394,  394,
      397,  402,  400,  395,  396,  397,  400,  403,  405,  407,
      404,  398,  402,  403,  406,  410,  406,  402,  408,  405,
      409,  410,  409,  403,  405,  407,  404,  408,  411,  357,

      412,  410,  406,  413,  408,  422,  409,  422,  424,  426,
      424,  426,  432,  413,  411,  411,  412,  422,  355,  413,
      424,  426,  427,  429,  427,  429,  434,  435,  432,  437,
      432,  438,  442,  436,  427,  429,  443,  434,  447,  440,
      432,  445,  434,  435,  436,  437,  344,  438,  442,  436,
      440,  446,  443,  448,  447,  440,  449,  445,  445,  450,
      339,  450,  446,  438,  451,  466,  451,  446,  448,  448,
      447,  467,  449,  449,  462,  450,  462,  468,  336,  471,
      451,  466,  473,  474,  476,  477,  462,  467,  479,  481,
      480,  327,  482,  468,  468,  471,  480,  495,  473,  474,

      476,  477,  477,  482,  479,  481,  480,  490,  482,  490,
      500,  502,  503,  495,  504,  505,  326,  514,  520,  490,
      521,  534,  535,  325,  503,  317,  500,  502,  503,  520,
      504,  505,  505,  514,  520,  298,  521,  534,  535,  567,
      567,  567,  567,  568,  278,  568,  568,  570,  570,  571,
      571,  572,  572,  573,  573,  574,  574,  575,  575,  268,
      267,  266,  265,  257,  234,  213,  203,  202,  201,  200,
      147,  131,   96,   43,   37,   21,   20,   18,   13,    8,
        5,    3,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_PDDL_Scanner_DEBUG != 0
static const short int yy_rule_linenum[113] =
    {   0,
       39,   40,   41,   43,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
      115,  116,  117,  119,  120,  121,  122,  123,  124,  125,
      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  137,  139,  140,  141,  142,  143,  145,  146,  147,

      149,  150,  151,  152,  153,  154,  155,  157,  165,  170,
      195,  196
    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 376 "/home/pahas/scratch/lib/flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_PDDL_Scanner_LEX_DEFINED
YY_PDDL_Scanner_LEX_RETURN YY_PDDL_Scanner_LEX ( YY_PDDL_Scanner_LEX_PARAM )
YY_PDDL_Scanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_PDDL_Scanner_LEX_RETURN YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_LEX ( YY_PDDL_Scanner_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_PDDL_Scanner_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 401 "/home/pahas/scratch/lib/flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_PDDL_Scanner_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_PDDL_Scanner_OFILE_DEFAULT;

	if ( YY_PDDL_Scanner_CURRENT_BUFFER )
	    YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, yy___in );
	else
	    YY_PDDL_Scanner_CURRENT_BUFFER = YY_PDDL_Scanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_PDDL_Scanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 429 "/home/pahas/scratch/lib/flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 567 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 566 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 440 "/home/pahas/scratch/lib/flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 443 "/home/pahas/scratch/lib/flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_PDDL_Scanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 39 "pddl2.lex"
;
	YY_BREAK
case 2:
#line 40 "pddl2.lex"
;
	YY_BREAK
case 3:
#line 41 "pddl2.lex"
{ _line_no++; if (_trace_line) std::cerr << std::endl << "LINE: " << _line_no << std::endl; }
	YY_BREAK
case 4:
#line 43 "pddl2.lex"
{
  val.sval = strndup(yytext + 1, strlen(yytext) - 2);
  return PDDL_Parser::TK_STRING;
}
	YY_BREAK
case 5:
#line 48 "pddl2.lex"
{return PDDL_Parser::TK_OPEN;}
	YY_BREAK
case 6:
#line 49 "pddl2.lex"
{return PDDL_Parser::TK_CLOSE;}
	YY_BREAK
case 7:
#line 50 "pddl2.lex"
{return PDDL_Parser::TK_OPEN_SQ;}
	YY_BREAK
case 8:
#line 51 "pddl2.lex"
{return PDDL_Parser::TK_CLOSE_SQ;}
	YY_BREAK
case 9:
#line 52 "pddl2.lex"
{return PDDL_Parser::TK_PLUS;}
	YY_BREAK
case 10:
#line 53 "pddl2.lex"
{return PDDL_Parser::TK_HYPHEN;}
	YY_BREAK
case 11:
#line 54 "pddl2.lex"
{return PDDL_Parser::TK_MUL;}
	YY_BREAK
case 12:
#line 55 "pddl2.lex"
{return PDDL_Parser::TK_DIV;}
	YY_BREAK
case 13:
#line 56 "pddl2.lex"
{return PDDL_Parser::TK_GREATER;}
	YY_BREAK
case 14:
#line 57 "pddl2.lex"
{return PDDL_Parser::TK_GREATEQ;}
	YY_BREAK
case 15:
#line 58 "pddl2.lex"
{return PDDL_Parser::TK_LESS;}
	YY_BREAK
case 16:
#line 59 "pddl2.lex"
{return PDDL_Parser::TK_LESSEQ;}
	YY_BREAK
case 17:
#line 60 "pddl2.lex"
{return PDDL_Parser::TK_COLON;}
	YY_BREAK
case 18:
#line 61 "pddl2.lex"
{return PDDL_Parser::TK_HASHT;}
	YY_BREAK
case 19:
#line 62 "pddl2.lex"
{return PDDL_Parser::TK_EQ;}
	YY_BREAK
case 20:
#line 64 "pddl2.lex"
{return PDDL_Parser::KW_REQS;}
	YY_BREAK
case 21:
#line 65 "pddl2.lex"
{return PDDL_Parser::KW_CONSTANTS;}
	YY_BREAK
case 22:
#line 66 "pddl2.lex"
{return PDDL_Parser::KW_PREDS;}
	YY_BREAK
case 23:
#line 67 "pddl2.lex"
{return PDDL_Parser::KW_FUNS;}
	YY_BREAK
case 24:
#line 68 "pddl2.lex"
{return PDDL_Parser::KW_TYPES;}
	YY_BREAK
case 25:
#line 69 "pddl2.lex"
{return PDDL_Parser::KW_DEFINE;}
	YY_BREAK
case 26:
#line 70 "pddl2.lex"
{return PDDL_Parser::KW_DOMAIN;}
	YY_BREAK
case 27:
#line 71 "pddl2.lex"
{return PDDL_Parser::KW_ACTION;}
	YY_BREAK
case 28:
#line 72 "pddl2.lex"
{return PDDL_Parser::KW_PROCESS;}
	YY_BREAK
case 29:
#line 73 "pddl2.lex"
{return PDDL_Parser::KW_EVENT;}
	YY_BREAK
case 30:
#line 74 "pddl2.lex"
{return PDDL_Parser::KW_ACTION;}
	YY_BREAK
case 31:
#line 75 "pddl2.lex"
{return PDDL_Parser::KW_ARGS;}
	YY_BREAK
case 32:
#line 76 "pddl2.lex"
{return PDDL_Parser::KW_PRE;}
	YY_BREAK
case 33:
#line 77 "pddl2.lex"
{return PDDL_Parser::KW_COND;}
	YY_BREAK
case 34:
#line 78 "pddl2.lex"
{return PDDL_Parser::KW_START_PRE;}
	YY_BREAK
case 35:
#line 79 "pddl2.lex"
{return PDDL_Parser::KW_END_PRE;}
	YY_BREAK
case 36:
#line 80 "pddl2.lex"
{return PDDL_Parser::KW_AT_START;}
	YY_BREAK
case 37:
#line 81 "pddl2.lex"
{return PDDL_Parser::KW_AT_END;}
	YY_BREAK
case 38:
#line 82 "pddl2.lex"
{return PDDL_Parser::KW_OVER_ALL;}
	YY_BREAK
case 39:
#line 83 "pddl2.lex"
{return PDDL_Parser::KW_EFFECT;}
	YY_BREAK
case 40:
#line 84 "pddl2.lex"
{return PDDL_Parser::KW_INITIAL_EFFECT;}
	YY_BREAK
case 41:
#line 85 "pddl2.lex"
{return PDDL_Parser::KW_FINAL_EFFECT;}
	YY_BREAK
case 42:
#line 86 "pddl2.lex"
{return PDDL_Parser::KW_INVARIANT;}
	YY_BREAK
case 43:
#line 87 "pddl2.lex"
{return PDDL_Parser::KW_DURATION;}
	YY_BREAK
case 44:
#line 88 "pddl2.lex"
{return PDDL_Parser::KW_EXPANSION;}
	YY_BREAK
case 45:
#line 89 "pddl2.lex"
{return PDDL_Parser::KW_TASKS;}
	YY_BREAK
case 46:
#line 90 "pddl2.lex"
{return PDDL_Parser::KW_AND;}
	YY_BREAK
case 47:
#line 91 "pddl2.lex"
{return PDDL_Parser::KW_OR;}
	YY_BREAK
case 48:
#line 92 "pddl2.lex"
{return PDDL_Parser::KW_EXISTS;}
	YY_BREAK
case 49:
#line 93 "pddl2.lex"
{return PDDL_Parser::KW_FORALL;}
	YY_BREAK
case 50:
#line 94 "pddl2.lex"
{return PDDL_Parser::KW_IMPLY;}
	YY_BREAK
case 51:
#line 95 "pddl2.lex"
{return PDDL_Parser::KW_NOT;}
	YY_BREAK
case 52:
#line 96 "pddl2.lex"
{return PDDL_Parser::KW_WHEN;}
	YY_BREAK
case 53:
#line 97 "pddl2.lex"
{return PDDL_Parser::KW_EITHER;}
	YY_BREAK
case 54:
#line 98 "pddl2.lex"
{return PDDL_Parser::KW_PROBLEM;}
	YY_BREAK
case 55:
#line 99 "pddl2.lex"
{return PDDL_Parser::KW_FORDOMAIN;}
	YY_BREAK
case 56:
#line 100 "pddl2.lex"
{return PDDL_Parser::KW_OBJECTS;}
	YY_BREAK
case 57:
#line 101 "pddl2.lex"
{return PDDL_Parser::KW_INIT;}
	YY_BREAK
case 58:
#line 102 "pddl2.lex"
{return PDDL_Parser::KW_GOAL;}
	YY_BREAK
case 59:
#line 103 "pddl2.lex"
{return PDDL_Parser::KW_LENGTH;}
	YY_BREAK
case 60:
#line 104 "pddl2.lex"
{return PDDL_Parser::KW_SERIAL;}
	YY_BREAK
case 61:
#line 105 "pddl2.lex"
{return PDDL_Parser::KW_PARALLEL;}
	YY_BREAK
case 62:
#line 106 "pddl2.lex"
{return PDDL_Parser::KW_SERIAL;}
	YY_BREAK
case 63:
#line 107 "pddl2.lex"
{return PDDL_Parser::KW_PARALLEL;}
	YY_BREAK
case 64:
#line 108 "pddl2.lex"
{return PDDL_Parser::KW_METRIC;}
	YY_BREAK
case 65:
#line 109 "pddl2.lex"
{return PDDL_Parser::KW_MINIMIZE;}
	YY_BREAK
case 66:
#line 110 "pddl2.lex"
{return PDDL_Parser::KW_MAXIMIZE;}
	YY_BREAK
case 67:
#line 111 "pddl2.lex"
{return PDDL_Parser::KW_DURATION_VAR;}
	YY_BREAK
case 68:
#line 112 "pddl2.lex"
{return PDDL_Parser::KW_TOTAL_TIME;}
	YY_BREAK
case 69:
#line 113 "pddl2.lex"
{return PDDL_Parser::KW_INCREASE;}
	YY_BREAK
case 70:
#line 114 "pddl2.lex"
{return PDDL_Parser::KW_DECREASE;}
	YY_BREAK
case 71:
#line 115 "pddl2.lex"
{return PDDL_Parser::KW_SCALE_UP;}
	YY_BREAK
case 72:
#line 116 "pddl2.lex"
{return PDDL_Parser::KW_SCALE_DOWN;}
	YY_BREAK
case 73:
#line 117 "pddl2.lex"
{return PDDL_Parser::KW_ASSIGN;}
	YY_BREAK
case 74:
#line 119 "pddl2.lex"
{return PDDL_Parser::KW_INVARIANT;}
	YY_BREAK
case 75:
#line 120 "pddl2.lex"
{return PDDL_Parser::KW_IRRELEVANT;}
	YY_BREAK
case 76:
#line 121 "pddl2.lex"
{return PDDL_Parser::KW_NAME;}
	YY_BREAK
case 77:
#line 122 "pddl2.lex"
{return PDDL_Parser::KW_TAG;}
	YY_BREAK
case 78:
#line 123 "pddl2.lex"
{return PDDL_Parser::KW_TAG;}
	YY_BREAK
case 79:
#line 124 "pddl2.lex"
{return PDDL_Parser::KW_TAG;}
	YY_BREAK
case 80:
#line 125 "pddl2.lex"
{return PDDL_Parser::KW_VARS;}
	YY_BREAK
case 81:
#line 126 "pddl2.lex"
{return PDDL_Parser::KW_CONTEXT;}
	YY_BREAK
case 82:
#line 127 "pddl2.lex"
{return PDDL_Parser::KW_SET_CONSTRAINT;}
	YY_BREAK
case 83:
#line 128 "pddl2.lex"
{return PDDL_Parser::KW_TYPEOF;}
	YY_BREAK
case 84:
#line 129 "pddl2.lex"
{return PDDL_Parser::KW_AT_LEAST_N;}
	YY_BREAK
case 85:
#line 130 "pddl2.lex"
{return PDDL_Parser::KW_AT_MOST_N;}
	YY_BREAK
case 86:
#line 131 "pddl2.lex"
{return PDDL_Parser::KW_EXACTLY_N;}
	YY_BREAK
case 87:
#line 132 "pddl2.lex"
{return PDDL_Parser::KW_AT_LEAST_N;}
	YY_BREAK
case 88:
#line 133 "pddl2.lex"
{return PDDL_Parser::KW_AT_MOST_N;}
	YY_BREAK
case 89:
#line 134 "pddl2.lex"
{return PDDL_Parser::KW_EXACTLY_N;}
	YY_BREAK
case 90:
#line 135 "pddl2.lex"
{return PDDL_Parser::KW_SETOF;}
	YY_BREAK
case 91:
#line 136 "pddl2.lex"
{return PDDL_Parser::KW_FACT;}
	YY_BREAK
case 92:
#line 137 "pddl2.lex"
{return PDDL_Parser::KW_ASSOC;}
	YY_BREAK
case 93:
#line 139 "pddl2.lex"
{return PDDL_Parser::KW_PLAN;}
	YY_BREAK
case 94:
#line 140 "pddl2.lex"
{return PDDL_Parser::KW_HEURISTIC;}
	YY_BREAK
case 95:
#line 141 "pddl2.lex"
{return PDDL_Parser::KW_OPT;}
	YY_BREAK
case 96:
#line 142 "pddl2.lex"
{return PDDL_Parser::KW_INF;}
	YY_BREAK
case 97:
#line 143 "pddl2.lex"
{return PDDL_Parser::KW_SET;}
	YY_BREAK
case 98:
#line 145 "pddl2.lex"
{return PDDL_Parser::KW_WITHIN;}
	YY_BREAK
case 99:
#line 146 "pddl2.lex"
{return PDDL_Parser::KW_PREFERENCE;}
	YY_BREAK
case 100:
#line 147 "pddl2.lex"
{return PDDL_Parser::KW_VIOLATED;}
	YY_BREAK
case 101:
#line 149 "pddl2.lex"
{ return PDDL_Parser::KW_CONSTRAINTS; }
	YY_BREAK
case 102:
#line 150 "pddl2.lex"
{ return PDDL_Parser::KW_ALWAYS; }
	YY_BREAK
case 103:
#line 151 "pddl2.lex"
{ return PDDL_Parser::KW_SOMETIME; }
	YY_BREAK
case 104:
#line 152 "pddl2.lex"
{ return PDDL_Parser::KW_AT_MOST_ONCE; }
	YY_BREAK
case 105:
#line 153 "pddl2.lex"
{ return PDDL_Parser::KW_SOMETIME_BEFORE; }
	YY_BREAK
case 106:
#line 154 "pddl2.lex"
{ return PDDL_Parser::KW_SOMETIME_AFTER; }
	YY_BREAK
case 107:
#line 155 "pddl2.lex"
{ return PDDL_Parser::KW_ALWAYS_WITHIN; }
	YY_BREAK
case 108:
#line 157 "pddl2.lex"
{
  val.sym = _tab.inserta(yytext);
  if (val.sym->val == 0) return PDDL_Parser::TK_NEW_VAR_SYMBOL;
  if (((PDDL_Base::Symbol*)val.sym->val)->sym_class == PDDL_Base::sym_variable)
    return PDDL_Parser::TK_VAR_SYMBOL;
  return PDDL_Parser::TK_NEW_VAR_SYMBOL;
}
	YY_BREAK
case 109:
#line 165 "pddl2.lex"
{
  val.sym = _tab.inserta(yytext);
  return PDDL_Parser::TK_KEYWORD;
}
	YY_BREAK
case 110:
#line 170 "pddl2.lex"
{
  val.sym = _tab.inserta(yytext);
  if (val.sym->val == 0) return PDDL_Parser::TK_NEW_SYMBOL;
  else {
    switch (((PDDL_Base::Symbol*)val.sym->val)->sym_class) {
    case PDDL_Base::sym_object:
      return PDDL_Parser::TK_OBJ_SYMBOL;
    case PDDL_Base::sym_typename:
      return PDDL_Parser::TK_TYPE_SYMBOL;
    case PDDL_Base::sym_predicate:
      return PDDL_Parser::TK_PRED_SYMBOL;
    case PDDL_Base::sym_function:
      return PDDL_Parser::TK_FUN_SYMBOL;
    case PDDL_Base::sym_action:
      return PDDL_Parser::TK_ACTION_SYMBOL;
    case PDDL_Base::sym_preference:
      return PDDL_Parser::TK_PREFERENCE_SYMBOL;
    case PDDL_Base::sym_set:
      return PDDL_Parser::TK_SET_SYMBOL;
    default:
      return PDDL_Parser::TK_MISC_SYMBOL;
    }
  }
}
	YY_BREAK
case 111:
#line 195 "pddl2.lex"
val.ival = atoi(yytext); return PDDL_Parser::TK_INT;
	YY_BREAK
case 112:
#line 196 "pddl2.lex"
val.rval = A_TO_NN(yytext); return PDDL_Parser::TK_FLOAT;
	YY_BREAK
case 113:
#line 198 "pddl2.lex"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();
#line 493 "/home/pahas/scratch/lib/flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 541 "/home/pahas/scratch/lib/flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_PDDL_Scanner_DEBUG != 0
#ifndef YY_PDDL_Scanner_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_PDDL_Scanner_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_PDDL_Scanner_CHAR *dest = YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf;
    register YY_PDDL_Scanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_PDDL_Scanner_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_PDDL_Scanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
#line 717 "/home/pahas/scratch/lib/flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 567 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 721 "/home/pahas/scratch/lib/flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_PDDL_Scanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 567 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 566);
#line 755 "/home/pahas/scratch/lib/flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_PDDL_Scanner_CHAR c, register YY_PDDL_Scanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_PDDL_Scanner_CHAR c;
register YY_PDDL_Scanner_CHAR *yy_bp;
#endif
#else
void YY_PDDL_Scanner_CLASS::yyunput( YY_PDDL_Scanner_CHAR c, YY_PDDL_Scanner_CHAR *yy_bp )
#endif

    {
    register YY_PDDL_Scanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_PDDL_Scanner_CHAR *dest =
	    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_PDDL_Scanner_CHAR *source =
	    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_PDDL_Scanner_CLASS::input()
#endif
    {
    int c;
    YY_PDDL_Scanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_PDDL_Scanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_RESTART( YY_PDDL_Scanner_IFILE  *input_file )
#else
void YY_PDDL_Scanner_RESTART( input_file )
YY_PDDL_Scanner_IFILE  *input_file;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_RESTART ( YY_PDDL_Scanner_IFILE  *input_file )
#endif

    {
    YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, input_file );
    YY_PDDL_Scanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_PDDL_Scanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_PDDL_Scanner_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_PDDL_Scanner_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_PDDL_Scanner_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_PDDL_Scanner_CURRENT_BUFFER = new_buffer;
    YY_PDDL_Scanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_LOAD_BUFFER_STATE( void )
#else
void YY_PDDL_Scanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_PDDL_Scanner_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_PDDL_Scanner_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_PDDL_Scanner_CREATE_BUFFER( YY_PDDL_Scanner_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_PDDL_Scanner_CREATE_BUFFER( file, size )
YY_PDDL_Scanner_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_CREATE_BUFFER( YY_PDDL_Scanner_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_PDDL_Scanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_PDDL_Scanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_PDDL_Scanner_CREATE_BUFFER()" );

    YY_PDDL_Scanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_PDDL_Scanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_PDDL_Scanner_CURRENT_BUFFER )
	YY_PDDL_Scanner_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_PDDL_Scanner_IFILE  *file )
#else
void YY_PDDL_Scanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_PDDL_Scanner_IFILE  *file;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_PDDL_Scanner_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 198 "pddl2.lex"


int yywrap() {
  return 1;
}

void PDDL_Scanner::open_file(char* name, bool trace) {
  yy_flex_debug = trace;
  yyin = fopen(name, "r");
  if (!yyin) {
    std::cerr << "error: can't open " << name << std::endl;
    exit(255);
  }
  _filename = name;
  if (_reset) yy_init_buffer(YY_PDDL_Scanner_CURRENT_BUFFER, yyin);
  _reset = true;
  _line_no = 1;
  _trace_line = trace;
}

void PDDL_Scanner::close_file() {
  if (_filename != 0) {
    fclose(yyin);
    _filename = 0;
  }
}
